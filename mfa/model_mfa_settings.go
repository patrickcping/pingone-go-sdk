/*
PingOne Platform API - PingOne MFA

The PingOne Platform API covering the PingOne MFA service

API version: 2021-10-17
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mfa

import (
	"encoding/json"
	"time"
)

// MFASettings struct for MFASettings
type MFASettings struct {
	Authentication *MFASettingsAuthentication `json:"authentication,omitempty"`
	Lockout *MFASettingsLockout `json:"lockout,omitempty"`
	Pairing *MFASettingsPairing `json:"pairing,omitempty"`
	// The time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// NewMFASettings instantiates a new MFASettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMFASettings() *MFASettings {
	this := MFASettings{}
	return &this
}

// NewMFASettingsWithDefaults instantiates a new MFASettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMFASettingsWithDefaults() *MFASettings {
	this := MFASettings{}
	return &this
}

// GetAuthentication returns the Authentication field value if set, zero value otherwise.
func (o *MFASettings) GetAuthentication() MFASettingsAuthentication {
	if o == nil || o.Authentication == nil {
		var ret MFASettingsAuthentication
		return ret
	}
	return *o.Authentication
}

// GetAuthenticationOk returns a tuple with the Authentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MFASettings) GetAuthenticationOk() (*MFASettingsAuthentication, bool) {
	if o == nil || o.Authentication == nil {
		return nil, false
	}
	return o.Authentication, true
}

// HasAuthentication returns a boolean if a field has been set.
func (o *MFASettings) HasAuthentication() bool {
	if o != nil && o.Authentication != nil {
		return true
	}

	return false
}

// SetAuthentication gets a reference to the given MFASettingsAuthentication and assigns it to the Authentication field.
func (o *MFASettings) SetAuthentication(v MFASettingsAuthentication) {
	o.Authentication = &v
}

// GetLockout returns the Lockout field value if set, zero value otherwise.
func (o *MFASettings) GetLockout() MFASettingsLockout {
	if o == nil || o.Lockout == nil {
		var ret MFASettingsLockout
		return ret
	}
	return *o.Lockout
}

// GetLockoutOk returns a tuple with the Lockout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MFASettings) GetLockoutOk() (*MFASettingsLockout, bool) {
	if o == nil || o.Lockout == nil {
		return nil, false
	}
	return o.Lockout, true
}

// HasLockout returns a boolean if a field has been set.
func (o *MFASettings) HasLockout() bool {
	if o != nil && o.Lockout != nil {
		return true
	}

	return false
}

// SetLockout gets a reference to the given MFASettingsLockout and assigns it to the Lockout field.
func (o *MFASettings) SetLockout(v MFASettingsLockout) {
	o.Lockout = &v
}

// GetPairing returns the Pairing field value if set, zero value otherwise.
func (o *MFASettings) GetPairing() MFASettingsPairing {
	if o == nil || o.Pairing == nil {
		var ret MFASettingsPairing
		return ret
	}
	return *o.Pairing
}

// GetPairingOk returns a tuple with the Pairing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MFASettings) GetPairingOk() (*MFASettingsPairing, bool) {
	if o == nil || o.Pairing == nil {
		return nil, false
	}
	return o.Pairing, true
}

// HasPairing returns a boolean if a field has been set.
func (o *MFASettings) HasPairing() bool {
	if o != nil && o.Pairing != nil {
		return true
	}

	return false
}

// SetPairing gets a reference to the given MFASettingsPairing and assigns it to the Pairing field.
func (o *MFASettings) SetPairing(v MFASettingsPairing) {
	o.Pairing = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *MFASettings) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MFASettings) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *MFASettings) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *MFASettings) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o MFASettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Authentication != nil {
		toSerialize["authentication"] = o.Authentication
	}
	if o.Lockout != nil {
		toSerialize["lockout"] = o.Lockout
	}
	if o.Pairing != nil {
		toSerialize["pairing"] = o.Pairing
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableMFASettings struct {
	value *MFASettings
	isSet bool
}

func (v NullableMFASettings) Get() *MFASettings {
	return v.value
}

func (v *NullableMFASettings) Set(val *MFASettings) {
	v.value = val
	v.isSet = true
}

func (v NullableMFASettings) IsSet() bool {
	return v.isSet
}

func (v *NullableMFASettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMFASettings(val *MFASettings) *NullableMFASettings {
	return &NullableMFASettings{value: val, isSet: true}
}

func (v NullableMFASettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMFASettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


