/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2022-09-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
)

// APIServerOperationsValue An object that specifies attributes of the operation.
type APIServerOperationsValue struct {
	// An array that specifies the methods that define the operation. No duplicates are allowed. Each element must be a valid HTTP token, according to RFC 7230, and cannot exceed 64 characters. An empty array is not valid. To indicate that an operation is defined for every method, the methods array should be set to null. The methods array is limited to 10 entries.
	Methods []string `json:"methods,omitempty"`
	// An array that specifies the paths that define the operation. This is a required property when an operations object is specified. The same literal pattern is not allowed within the same operation (the pattern of a paths element must be unique as compared to all other patterns in the same paths array). However, the same literal pattern is allowed in different operations (for example, OperationA, /path1, OperationB, /path1 is valid). The paths array is limited to 10 entries.
	Paths []APIServerOperationsValuePathsInner `json:"paths"`
	AccessControl *APIServerOperationsValueAccessControl `json:"accessControl,omitempty"`
}

// NewAPIServerOperationsValue instantiates a new APIServerOperationsValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAPIServerOperationsValue(paths []APIServerOperationsValuePathsInner) *APIServerOperationsValue {
	this := APIServerOperationsValue{}
	this.Paths = paths
	return &this
}

// NewAPIServerOperationsValueWithDefaults instantiates a new APIServerOperationsValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAPIServerOperationsValueWithDefaults() *APIServerOperationsValue {
	this := APIServerOperationsValue{}
	return &this
}

// GetMethods returns the Methods field value if set, zero value otherwise.
func (o *APIServerOperationsValue) GetMethods() []string {
	if o == nil || o.Methods == nil {
		var ret []string
		return ret
	}
	return o.Methods
}

// GetMethodsOk returns a tuple with the Methods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIServerOperationsValue) GetMethodsOk() ([]string, bool) {
	if o == nil || o.Methods == nil {
		return nil, false
	}
	return o.Methods, true
}

// HasMethods returns a boolean if a field has been set.
func (o *APIServerOperationsValue) HasMethods() bool {
	if o != nil && o.Methods != nil {
		return true
	}

	return false
}

// SetMethods gets a reference to the given []string and assigns it to the Methods field.
func (o *APIServerOperationsValue) SetMethods(v []string) {
	o.Methods = v
}

// GetPaths returns the Paths field value
func (o *APIServerOperationsValue) GetPaths() []APIServerOperationsValuePathsInner {
	if o == nil {
		var ret []APIServerOperationsValuePathsInner
		return ret
	}

	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value
// and a boolean to check if the value has been set.
func (o *APIServerOperationsValue) GetPathsOk() ([]APIServerOperationsValuePathsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Paths, true
}

// SetPaths sets field value
func (o *APIServerOperationsValue) SetPaths(v []APIServerOperationsValuePathsInner) {
	o.Paths = v
}

// GetAccessControl returns the AccessControl field value if set, zero value otherwise.
func (o *APIServerOperationsValue) GetAccessControl() APIServerOperationsValueAccessControl {
	if o == nil || o.AccessControl == nil {
		var ret APIServerOperationsValueAccessControl
		return ret
	}
	return *o.AccessControl
}

// GetAccessControlOk returns a tuple with the AccessControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIServerOperationsValue) GetAccessControlOk() (*APIServerOperationsValueAccessControl, bool) {
	if o == nil || o.AccessControl == nil {
		return nil, false
	}
	return o.AccessControl, true
}

// HasAccessControl returns a boolean if a field has been set.
func (o *APIServerOperationsValue) HasAccessControl() bool {
	if o != nil && o.AccessControl != nil {
		return true
	}

	return false
}

// SetAccessControl gets a reference to the given APIServerOperationsValueAccessControl and assigns it to the AccessControl field.
func (o *APIServerOperationsValue) SetAccessControl(v APIServerOperationsValueAccessControl) {
	o.AccessControl = &v
}

func (o APIServerOperationsValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Methods != nil {
		toSerialize["methods"] = o.Methods
	}
	if true {
		toSerialize["paths"] = o.Paths
	}
	if o.AccessControl != nil {
		toSerialize["accessControl"] = o.AccessControl
	}
	return json.Marshal(toSerialize)
}

type NullableAPIServerOperationsValue struct {
	value *APIServerOperationsValue
	isSet bool
}

func (v NullableAPIServerOperationsValue) Get() *APIServerOperationsValue {
	return v.value
}

func (v *NullableAPIServerOperationsValue) Set(val *APIServerOperationsValue) {
	v.value = val
	v.isSet = true
}

func (v NullableAPIServerOperationsValue) IsSet() bool {
	return v.isSet
}

func (v *NullableAPIServerOperationsValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAPIServerOperationsValue(val *APIServerOperationsValue) *NullableAPIServerOperationsValue {
	return &NullableAPIServerOperationsValue{value: val, isSet: true}
}

func (v NullableAPIServerOperationsValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAPIServerOperationsValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


