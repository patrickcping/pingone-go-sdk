/*
PingOne Platform API - Credentials

The PingOne Platform API covering the PingOne Credentials service

API version: 2023-03-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package credentials

import (
	"encoding/json"
)

// checks if the CredentialIssuanceRuleNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CredentialIssuanceRuleNotification{}

// CredentialIssuanceRuleNotification struct for CredentialIssuanceRuleNotification
type CredentialIssuanceRuleNotification struct {
	Methods []EnumCredentialIssuanceRuleNotificationMethod `json:"methods,omitempty"`
	// A string that specifies the ISO 2-character language code used for the notification; for example, en.
	Locale *string `json:"locale,omitempty"`
	// An object of key:value pairs that defines the dynamic variables used by the content variant.
	Variables map[string]interface{} `json:"variables,omitempty"`
	// A string that specifies the unique user-defined name for the content variant that contains the message text used for the notification
	Variant *string `json:"variant,omitempty"`
}

// NewCredentialIssuanceRuleNotification instantiates a new CredentialIssuanceRuleNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCredentialIssuanceRuleNotification() *CredentialIssuanceRuleNotification {
	this := CredentialIssuanceRuleNotification{}
	return &this
}

// NewCredentialIssuanceRuleNotificationWithDefaults instantiates a new CredentialIssuanceRuleNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCredentialIssuanceRuleNotificationWithDefaults() *CredentialIssuanceRuleNotification {
	this := CredentialIssuanceRuleNotification{}
	return &this
}

// GetMethods returns the Methods field value if set, zero value otherwise.
func (o *CredentialIssuanceRuleNotification) GetMethods() []EnumCredentialIssuanceRuleNotificationMethod {
	if o == nil || IsNil(o.Methods) {
		var ret []EnumCredentialIssuanceRuleNotificationMethod
		return ret
	}
	return o.Methods
}

// GetMethodsOk returns a tuple with the Methods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialIssuanceRuleNotification) GetMethodsOk() ([]EnumCredentialIssuanceRuleNotificationMethod, bool) {
	if o == nil || IsNil(o.Methods) {
		return nil, false
	}
	return o.Methods, true
}

// HasMethods returns a boolean if a field has been set.
func (o *CredentialIssuanceRuleNotification) HasMethods() bool {
	if o != nil && !IsNil(o.Methods) {
		return true
	}

	return false
}

// SetMethods gets a reference to the given []EnumCredentialIssuanceRuleNotificationMethod and assigns it to the Methods field.
func (o *CredentialIssuanceRuleNotification) SetMethods(v []EnumCredentialIssuanceRuleNotificationMethod) {
	o.Methods = v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *CredentialIssuanceRuleNotification) GetLocale() string {
	if o == nil || IsNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialIssuanceRuleNotification) GetLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *CredentialIssuanceRuleNotification) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *CredentialIssuanceRuleNotification) SetLocale(v string) {
	o.Locale = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *CredentialIssuanceRuleNotification) GetVariables() map[string]interface{} {
	if o == nil || IsNil(o.Variables) {
		var ret map[string]interface{}
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialIssuanceRuleNotification) GetVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Variables) {
		return map[string]interface{}{}, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *CredentialIssuanceRuleNotification) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]interface{} and assigns it to the Variables field.
func (o *CredentialIssuanceRuleNotification) SetVariables(v map[string]interface{}) {
	o.Variables = v
}

// GetVariant returns the Variant field value if set, zero value otherwise.
func (o *CredentialIssuanceRuleNotification) GetVariant() string {
	if o == nil || IsNil(o.Variant) {
		var ret string
		return ret
	}
	return *o.Variant
}

// GetVariantOk returns a tuple with the Variant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialIssuanceRuleNotification) GetVariantOk() (*string, bool) {
	if o == nil || IsNil(o.Variant) {
		return nil, false
	}
	return o.Variant, true
}

// HasVariant returns a boolean if a field has been set.
func (o *CredentialIssuanceRuleNotification) HasVariant() bool {
	if o != nil && !IsNil(o.Variant) {
		return true
	}

	return false
}

// SetVariant gets a reference to the given string and assigns it to the Variant field.
func (o *CredentialIssuanceRuleNotification) SetVariant(v string) {
	o.Variant = &v
}

func (o CredentialIssuanceRuleNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CredentialIssuanceRuleNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Methods) {
		toSerialize["methods"] = o.Methods
	}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !IsNil(o.Variant) {
		toSerialize["variant"] = o.Variant
	}
	return toSerialize, nil
}

type NullableCredentialIssuanceRuleNotification struct {
	value *CredentialIssuanceRuleNotification
	isSet bool
}

func (v NullableCredentialIssuanceRuleNotification) Get() *CredentialIssuanceRuleNotification {
	return v.value
}

func (v *NullableCredentialIssuanceRuleNotification) Set(val *CredentialIssuanceRuleNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableCredentialIssuanceRuleNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableCredentialIssuanceRuleNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredentialIssuanceRuleNotification(val *CredentialIssuanceRuleNotification) *NullableCredentialIssuanceRuleNotification {
	return &NullableCredentialIssuanceRuleNotification{value: val, isSet: true}
}

func (v NullableCredentialIssuanceRuleNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredentialIssuanceRuleNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


