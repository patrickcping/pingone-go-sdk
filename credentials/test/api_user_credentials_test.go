/*
PingOne Platform API - Credentials

Testing UserCredentialsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package credentials

import (
	"context"
	"testing"

	openapiclient "github.com/patrickcping/pingone-go-sdk-v2/credentials"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_credentials_UserCredentialsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UserCredentialsApiService CreateAUserCredential", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var environmentID string
		var userID string

		resp, httpRes, err := apiClient.UserCredentialsApi.CreateAUserCredential(context.Background(), environmentID, userID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserCredentialsApiService ReadAllUserCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var environmentID string
		var userID string

		resp, httpRes, err := apiClient.UserCredentialsApi.ReadAllUserCredentials(context.Background(), environmentID, userID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserCredentialsApiService ReadOneUserCredential", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var environmentID string
		var userID string
		var credentialID string

		resp, httpRes, err := apiClient.UserCredentialsApi.ReadOneUserCredential(context.Background(), environmentID, userID, credentialID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserCredentialsApiService ReadOneUserCredentialWallet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var environmentID string
		var userID string
		var credentialID string

		resp, httpRes, err := apiClient.UserCredentialsApi.ReadOneUserCredentialWallet(context.Background(), environmentID, userID, credentialID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserCredentialsApiService UpdateAUserCredential", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var environmentID string
		var userID string
		var credentialID string

		resp, httpRes, err := apiClient.UserCredentialsApi.UpdateUserCredential(context.Background(), environmentID, userID, credentialID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
