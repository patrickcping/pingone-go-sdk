/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// checks if the IdentityProviderSAMLAllOfIdpVerification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityProviderSAMLAllOfIdpVerification{}

// IdentityProviderSAMLAllOfIdpVerification struct for IdentityProviderSAMLAllOfIdpVerification
type IdentityProviderSAMLAllOfIdpVerification struct {
	// A array that specifies the identity provider's certificate IDs used to verify the signature on the signed assertion from the identity provider. Signing is done with a private key and verified with a public key.
	Certificates []IdentityProviderSAMLAllOfIdpVerificationCertificates `json:"certificates"`
}

type _IdentityProviderSAMLAllOfIdpVerification IdentityProviderSAMLAllOfIdpVerification

// NewIdentityProviderSAMLAllOfIdpVerification instantiates a new IdentityProviderSAMLAllOfIdpVerification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityProviderSAMLAllOfIdpVerification(certificates []IdentityProviderSAMLAllOfIdpVerificationCertificates) *IdentityProviderSAMLAllOfIdpVerification {
	this := IdentityProviderSAMLAllOfIdpVerification{}
	this.Certificates = certificates
	return &this
}

// NewIdentityProviderSAMLAllOfIdpVerificationWithDefaults instantiates a new IdentityProviderSAMLAllOfIdpVerification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityProviderSAMLAllOfIdpVerificationWithDefaults() *IdentityProviderSAMLAllOfIdpVerification {
	this := IdentityProviderSAMLAllOfIdpVerification{}
	return &this
}

// GetCertificates returns the Certificates field value
func (o *IdentityProviderSAMLAllOfIdpVerification) GetCertificates() []IdentityProviderSAMLAllOfIdpVerificationCertificates {
	if o == nil {
		var ret []IdentityProviderSAMLAllOfIdpVerificationCertificates
		return ret
	}

	return o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value
// and a boolean to check if the value has been set.
func (o *IdentityProviderSAMLAllOfIdpVerification) GetCertificatesOk() ([]IdentityProviderSAMLAllOfIdpVerificationCertificates, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificates, true
}

// SetCertificates sets field value
func (o *IdentityProviderSAMLAllOfIdpVerification) SetCertificates(v []IdentityProviderSAMLAllOfIdpVerificationCertificates) {
	o.Certificates = v
}

func (o IdentityProviderSAMLAllOfIdpVerification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityProviderSAMLAllOfIdpVerification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificates"] = o.Certificates
	return toSerialize, nil
}

func (o *IdentityProviderSAMLAllOfIdpVerification) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"certificates",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdentityProviderSAMLAllOfIdpVerification := _IdentityProviderSAMLAllOfIdpVerification{}

	err = json.Unmarshal(bytes, &varIdentityProviderSAMLAllOfIdpVerification)

	if err != nil {
		return err
	}

	*o = IdentityProviderSAMLAllOfIdpVerification(varIdentityProviderSAMLAllOfIdpVerification)

	return err
}

type NullableIdentityProviderSAMLAllOfIdpVerification struct {
	value *IdentityProviderSAMLAllOfIdpVerification
	isSet bool
}

func (v NullableIdentityProviderSAMLAllOfIdpVerification) Get() *IdentityProviderSAMLAllOfIdpVerification {
	return v.value
}

func (v *NullableIdentityProviderSAMLAllOfIdpVerification) Set(val *IdentityProviderSAMLAllOfIdpVerification) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityProviderSAMLAllOfIdpVerification) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityProviderSAMLAllOfIdpVerification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityProviderSAMLAllOfIdpVerification(val *IdentityProviderSAMLAllOfIdpVerification) *NullableIdentityProviderSAMLAllOfIdpVerification {
	return &NullableIdentityProviderSAMLAllOfIdpVerification{value: val, isSet: true}
}

func (v NullableIdentityProviderSAMLAllOfIdpVerification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityProviderSAMLAllOfIdpVerification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


