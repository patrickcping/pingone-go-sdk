/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-07-18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// SignOnPolicyAction - struct for SignOnPolicyAction
type SignOnPolicyAction struct {
	SignOnPolicyActionAgreement *SignOnPolicyActionAgreement
	SignOnPolicyActionIDFirst *SignOnPolicyActionIDFirst
	SignOnPolicyActionIDP *SignOnPolicyActionIDP
	SignOnPolicyActionLogin *SignOnPolicyActionLogin
	SignOnPolicyActionMFA *SignOnPolicyActionMFA
	SignOnPolicyActionProgressiveProfiling *SignOnPolicyActionProgressiveProfiling
}

// SignOnPolicyActionAgreementAsSignOnPolicyAction is a convenience function that returns SignOnPolicyActionAgreement wrapped in SignOnPolicyAction
func SignOnPolicyActionAgreementAsSignOnPolicyAction(v *SignOnPolicyActionAgreement) SignOnPolicyAction {
	return SignOnPolicyAction{
		SignOnPolicyActionAgreement: v,
	}
}

// SignOnPolicyActionIDFirstAsSignOnPolicyAction is a convenience function that returns SignOnPolicyActionIDFirst wrapped in SignOnPolicyAction
func SignOnPolicyActionIDFirstAsSignOnPolicyAction(v *SignOnPolicyActionIDFirst) SignOnPolicyAction {
	return SignOnPolicyAction{
		SignOnPolicyActionIDFirst: v,
	}
}

// SignOnPolicyActionIDPAsSignOnPolicyAction is a convenience function that returns SignOnPolicyActionIDP wrapped in SignOnPolicyAction
func SignOnPolicyActionIDPAsSignOnPolicyAction(v *SignOnPolicyActionIDP) SignOnPolicyAction {
	return SignOnPolicyAction{
		SignOnPolicyActionIDP: v,
	}
}

// SignOnPolicyActionLoginAsSignOnPolicyAction is a convenience function that returns SignOnPolicyActionLogin wrapped in SignOnPolicyAction
func SignOnPolicyActionLoginAsSignOnPolicyAction(v *SignOnPolicyActionLogin) SignOnPolicyAction {
	return SignOnPolicyAction{
		SignOnPolicyActionLogin: v,
	}
}

// SignOnPolicyActionMFAAsSignOnPolicyAction is a convenience function that returns SignOnPolicyActionMFA wrapped in SignOnPolicyAction
func SignOnPolicyActionMFAAsSignOnPolicyAction(v *SignOnPolicyActionMFA) SignOnPolicyAction {
	return SignOnPolicyAction{
		SignOnPolicyActionMFA: v,
	}
}

// SignOnPolicyActionProgressiveProfilingAsSignOnPolicyAction is a convenience function that returns SignOnPolicyActionProgressiveProfiling wrapped in SignOnPolicyAction
func SignOnPolicyActionProgressiveProfilingAsSignOnPolicyAction(v *SignOnPolicyActionProgressiveProfiling) SignOnPolicyAction {
	return SignOnPolicyAction{
		SignOnPolicyActionProgressiveProfiling: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SignOnPolicyAction) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SignOnPolicyActionAgreement
	err = newStrictDecoder(data).Decode(&dst.SignOnPolicyActionAgreement)
	if err == nil {
		jsonSignOnPolicyActionAgreement, _ := json.Marshal(dst.SignOnPolicyActionAgreement)
		if string(jsonSignOnPolicyActionAgreement) == "{}" { // empty struct
			dst.SignOnPolicyActionAgreement = nil
		} else {
			if dst.SignOnPolicyActionAgreement.Type == ENUMSIGNONPOLICYTYPE_AGREEMENT {
				match++
			} else {
				dst.SignOnPolicyActionAgreement = nil
			}
		}
	} else {
		dst.SignOnPolicyActionAgreement = nil
	}

	// try to unmarshal data into SignOnPolicyActionIDFirst
	err = newStrictDecoder(data).Decode(&dst.SignOnPolicyActionIDFirst)
	if err == nil {
		jsonSignOnPolicyActionIDFirst, _ := json.Marshal(dst.SignOnPolicyActionIDFirst)
		if string(jsonSignOnPolicyActionIDFirst) == "{}" { // empty struct
			dst.SignOnPolicyActionIDFirst = nil
		} else {
			if dst.SignOnPolicyActionIDFirst.Type == ENUMSIGNONPOLICYTYPE_IDENTIFIER_FIRST {
				match++
			} else {
				dst.SignOnPolicyActionIDFirst = nil
			}
		}
	} else {
		dst.SignOnPolicyActionIDFirst = nil
	}

	// try to unmarshal data into SignOnPolicyActionIDP
	err = newStrictDecoder(data).Decode(&dst.SignOnPolicyActionIDP)
	if err == nil {
		jsonSignOnPolicyActionIDP, _ := json.Marshal(dst.SignOnPolicyActionIDP)
		if string(jsonSignOnPolicyActionIDP) == "{}" { // empty struct
			dst.SignOnPolicyActionIDP = nil
		} else {
			if dst.SignOnPolicyActionIDP.Type == ENUMSIGNONPOLICYTYPE_IDENTITY_PROVIDER {
				match++
			} else {
				dst.SignOnPolicyActionIDP = nil
			}
		}
	} else {
		dst.SignOnPolicyActionIDP = nil
	}

	// try to unmarshal data into SignOnPolicyActionLogin
	err = newStrictDecoder(data).Decode(&dst.SignOnPolicyActionLogin)
	if err == nil {
		jsonSignOnPolicyActionLogin, _ := json.Marshal(dst.SignOnPolicyActionLogin)
		if string(jsonSignOnPolicyActionLogin) == "{}" { // empty struct
			dst.SignOnPolicyActionLogin = nil
		} else {
			if dst.SignOnPolicyActionLogin.Type == ENUMSIGNONPOLICYTYPE_LOGIN {
				match++
			} else {
				dst.SignOnPolicyActionLogin = nil
			}
		}
	} else {
		dst.SignOnPolicyActionLogin = nil
	}

	// try to unmarshal data into SignOnPolicyActionMFA
	err = newStrictDecoder(data).Decode(&dst.SignOnPolicyActionMFA)
	if err == nil {
		jsonSignOnPolicyActionMFA, _ := json.Marshal(dst.SignOnPolicyActionMFA)
		if string(jsonSignOnPolicyActionMFA) == "{}" { // empty struct
			dst.SignOnPolicyActionMFA = nil
		} else {
			if dst.SignOnPolicyActionMFA.Type == ENUMSIGNONPOLICYTYPE_MULTI_FACTOR_AUTHENTICATION {
				match++
			} else {
				dst.SignOnPolicyActionMFA = nil
			}
		}
	} else {
		dst.SignOnPolicyActionMFA = nil
	}

	// try to unmarshal data into SignOnPolicyActionProgressiveProfiling
	err = newStrictDecoder(data).Decode(&dst.SignOnPolicyActionProgressiveProfiling)
	if err == nil {
		jsonSignOnPolicyActionProgressiveProfiling, _ := json.Marshal(dst.SignOnPolicyActionProgressiveProfiling)
		if string(jsonSignOnPolicyActionProgressiveProfiling) == "{}" { // empty struct
			dst.SignOnPolicyActionProgressiveProfiling = nil
		} else {
			if dst.SignOnPolicyActionProgressiveProfiling.Type == ENUMSIGNONPOLICYTYPE_PROGRESSIVE_PROFILING {
				match++
			} else {
				dst.SignOnPolicyActionProgressiveProfiling = nil
			}
		}
	} else {
		dst.SignOnPolicyActionProgressiveProfiling = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SignOnPolicyActionAgreement = nil
		dst.SignOnPolicyActionIDFirst = nil
		dst.SignOnPolicyActionIDP = nil
		dst.SignOnPolicyActionLogin = nil
		dst.SignOnPolicyActionMFA = nil
		dst.SignOnPolicyActionProgressiveProfiling = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(SignOnPolicyAction)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(SignOnPolicyAction)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SignOnPolicyAction) MarshalJSON() ([]byte, error) {
	if src.SignOnPolicyActionAgreement != nil {
		return json.Marshal(&src.SignOnPolicyActionAgreement)
	}

	if src.SignOnPolicyActionIDFirst != nil {
		return json.Marshal(&src.SignOnPolicyActionIDFirst)
	}

	if src.SignOnPolicyActionIDP != nil {
		return json.Marshal(&src.SignOnPolicyActionIDP)
	}

	if src.SignOnPolicyActionLogin != nil {
		return json.Marshal(&src.SignOnPolicyActionLogin)
	}

	if src.SignOnPolicyActionMFA != nil {
		return json.Marshal(&src.SignOnPolicyActionMFA)
	}

	if src.SignOnPolicyActionProgressiveProfiling != nil {
		return json.Marshal(&src.SignOnPolicyActionProgressiveProfiling)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SignOnPolicyAction) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SignOnPolicyActionAgreement != nil {
		return obj.SignOnPolicyActionAgreement
	}

	if obj.SignOnPolicyActionIDFirst != nil {
		return obj.SignOnPolicyActionIDFirst
	}

	if obj.SignOnPolicyActionIDP != nil {
		return obj.SignOnPolicyActionIDP
	}

	if obj.SignOnPolicyActionLogin != nil {
		return obj.SignOnPolicyActionLogin
	}

	if obj.SignOnPolicyActionMFA != nil {
		return obj.SignOnPolicyActionMFA
	}

	if obj.SignOnPolicyActionProgressiveProfiling != nil {
		return obj.SignOnPolicyActionProgressiveProfiling
	}

	// all schemas are nil
	return nil
}

type NullableSignOnPolicyAction struct {
	value *SignOnPolicyAction
	isSet bool
}

func (v NullableSignOnPolicyAction) Get() *SignOnPolicyAction {
	return v.value
}

func (v *NullableSignOnPolicyAction) Set(val *SignOnPolicyAction) {
	v.value = val
	v.isSet = true
}

func (v NullableSignOnPolicyAction) IsSet() bool {
	return v.isSet
}

func (v *NullableSignOnPolicyAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignOnPolicyAction(val *SignOnPolicyAction) *NullableSignOnPolicyAction {
	return &NullableSignOnPolicyAction{value: val, isSet: true}
}

func (v NullableSignOnPolicyAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignOnPolicyAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


