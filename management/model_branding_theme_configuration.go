/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-08-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// BrandingThemeConfiguration struct for BrandingThemeConfiguration
type BrandingThemeConfiguration struct {
	// The background color for the theme. It must be a valid hexadecimal color code, and it is a required property when configuration.backgroundType is set to COLOR.
	BackgroundColor string `json:"backgroundColor"`
	BackgroundType EnumBrandingThemeBackgroundType `json:"backgroundType"`
	BackgroundImage *BrandingThemeConfigurationBackgroundImage `json:"backgroundImage,omitempty"`
	// The body text color for the theme. It must be a valid hexadecimal color code.
	BodyTextColor *string `json:"bodyTextColor,omitempty"`
	// The button color for the theme. It must be a valid hexadecimal color code.
	ButtonColor *string `json:"buttonColor,omitempty"`
	// The button text color for the branding theme. It must be a valid hexadecimal color code.
	ButtonTextColor *string `json:"buttonTextColor,omitempty"`
	// The card color for the branding theme. It must be a valid hexadecimal color code.
	CardColor *string `json:"cardColor,omitempty"`
	// The footer of the branding theme.
	Footer *string `json:"footer,omitempty"`
	// The heading text color for the branding theme. It must be a valid hexadecimal color code.
	HeadingTextColor *string `json:"headingTextColor,omitempty"`
	// The hyperlink text color for the branding theme. It must be a valid hexadecimal color code.
	LinkTextColor *string `json:"linkTextColor,omitempty"`
	Logo *BrandingThemeConfigurationLogo `json:"logo,omitempty"`
	LogoType EnumBrandingLogoType `json:"logoType"`
	// The name of the branding theme.
	Name *string `json:"name,omitempty"`
}

// NewBrandingThemeConfiguration instantiates a new BrandingThemeConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrandingThemeConfiguration(backgroundColor string, backgroundType EnumBrandingThemeBackgroundType, logoType EnumBrandingLogoType) *BrandingThemeConfiguration {
	this := BrandingThemeConfiguration{}
	this.BackgroundColor = backgroundColor
	this.BackgroundType = backgroundType
	this.LogoType = logoType
	return &this
}

// NewBrandingThemeConfigurationWithDefaults instantiates a new BrandingThemeConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrandingThemeConfigurationWithDefaults() *BrandingThemeConfiguration {
	this := BrandingThemeConfiguration{}
	return &this
}

// GetBackgroundColor returns the BackgroundColor field value
func (o *BrandingThemeConfiguration) GetBackgroundColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BackgroundColor
}

// GetBackgroundColorOk returns a tuple with the BackgroundColor field value
// and a boolean to check if the value has been set.
func (o *BrandingThemeConfiguration) GetBackgroundColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackgroundColor, true
}

// SetBackgroundColor sets field value
func (o *BrandingThemeConfiguration) SetBackgroundColor(v string) {
	o.BackgroundColor = v
}

// GetBackgroundType returns the BackgroundType field value
func (o *BrandingThemeConfiguration) GetBackgroundType() EnumBrandingThemeBackgroundType {
	if o == nil {
		var ret EnumBrandingThemeBackgroundType
		return ret
	}

	return o.BackgroundType
}

// GetBackgroundTypeOk returns a tuple with the BackgroundType field value
// and a boolean to check if the value has been set.
func (o *BrandingThemeConfiguration) GetBackgroundTypeOk() (*EnumBrandingThemeBackgroundType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackgroundType, true
}

// SetBackgroundType sets field value
func (o *BrandingThemeConfiguration) SetBackgroundType(v EnumBrandingThemeBackgroundType) {
	o.BackgroundType = v
}

// GetBackgroundImage returns the BackgroundImage field value if set, zero value otherwise.
func (o *BrandingThemeConfiguration) GetBackgroundImage() BrandingThemeConfigurationBackgroundImage {
	if o == nil || o.BackgroundImage == nil {
		var ret BrandingThemeConfigurationBackgroundImage
		return ret
	}
	return *o.BackgroundImage
}

// GetBackgroundImageOk returns a tuple with the BackgroundImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandingThemeConfiguration) GetBackgroundImageOk() (*BrandingThemeConfigurationBackgroundImage, bool) {
	if o == nil || o.BackgroundImage == nil {
		return nil, false
	}
	return o.BackgroundImage, true
}

// HasBackgroundImage returns a boolean if a field has been set.
func (o *BrandingThemeConfiguration) HasBackgroundImage() bool {
	if o != nil && o.BackgroundImage != nil {
		return true
	}

	return false
}

// SetBackgroundImage gets a reference to the given BrandingThemeConfigurationBackgroundImage and assigns it to the BackgroundImage field.
func (o *BrandingThemeConfiguration) SetBackgroundImage(v BrandingThemeConfigurationBackgroundImage) {
	o.BackgroundImage = &v
}

// GetBodyTextColor returns the BodyTextColor field value if set, zero value otherwise.
func (o *BrandingThemeConfiguration) GetBodyTextColor() string {
	if o == nil || o.BodyTextColor == nil {
		var ret string
		return ret
	}
	return *o.BodyTextColor
}

// GetBodyTextColorOk returns a tuple with the BodyTextColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandingThemeConfiguration) GetBodyTextColorOk() (*string, bool) {
	if o == nil || o.BodyTextColor == nil {
		return nil, false
	}
	return o.BodyTextColor, true
}

// HasBodyTextColor returns a boolean if a field has been set.
func (o *BrandingThemeConfiguration) HasBodyTextColor() bool {
	if o != nil && o.BodyTextColor != nil {
		return true
	}

	return false
}

// SetBodyTextColor gets a reference to the given string and assigns it to the BodyTextColor field.
func (o *BrandingThemeConfiguration) SetBodyTextColor(v string) {
	o.BodyTextColor = &v
}

// GetButtonColor returns the ButtonColor field value if set, zero value otherwise.
func (o *BrandingThemeConfiguration) GetButtonColor() string {
	if o == nil || o.ButtonColor == nil {
		var ret string
		return ret
	}
	return *o.ButtonColor
}

// GetButtonColorOk returns a tuple with the ButtonColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandingThemeConfiguration) GetButtonColorOk() (*string, bool) {
	if o == nil || o.ButtonColor == nil {
		return nil, false
	}
	return o.ButtonColor, true
}

// HasButtonColor returns a boolean if a field has been set.
func (o *BrandingThemeConfiguration) HasButtonColor() bool {
	if o != nil && o.ButtonColor != nil {
		return true
	}

	return false
}

// SetButtonColor gets a reference to the given string and assigns it to the ButtonColor field.
func (o *BrandingThemeConfiguration) SetButtonColor(v string) {
	o.ButtonColor = &v
}

// GetButtonTextColor returns the ButtonTextColor field value if set, zero value otherwise.
func (o *BrandingThemeConfiguration) GetButtonTextColor() string {
	if o == nil || o.ButtonTextColor == nil {
		var ret string
		return ret
	}
	return *o.ButtonTextColor
}

// GetButtonTextColorOk returns a tuple with the ButtonTextColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandingThemeConfiguration) GetButtonTextColorOk() (*string, bool) {
	if o == nil || o.ButtonTextColor == nil {
		return nil, false
	}
	return o.ButtonTextColor, true
}

// HasButtonTextColor returns a boolean if a field has been set.
func (o *BrandingThemeConfiguration) HasButtonTextColor() bool {
	if o != nil && o.ButtonTextColor != nil {
		return true
	}

	return false
}

// SetButtonTextColor gets a reference to the given string and assigns it to the ButtonTextColor field.
func (o *BrandingThemeConfiguration) SetButtonTextColor(v string) {
	o.ButtonTextColor = &v
}

// GetCardColor returns the CardColor field value if set, zero value otherwise.
func (o *BrandingThemeConfiguration) GetCardColor() string {
	if o == nil || o.CardColor == nil {
		var ret string
		return ret
	}
	return *o.CardColor
}

// GetCardColorOk returns a tuple with the CardColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandingThemeConfiguration) GetCardColorOk() (*string, bool) {
	if o == nil || o.CardColor == nil {
		return nil, false
	}
	return o.CardColor, true
}

// HasCardColor returns a boolean if a field has been set.
func (o *BrandingThemeConfiguration) HasCardColor() bool {
	if o != nil && o.CardColor != nil {
		return true
	}

	return false
}

// SetCardColor gets a reference to the given string and assigns it to the CardColor field.
func (o *BrandingThemeConfiguration) SetCardColor(v string) {
	o.CardColor = &v
}

// GetFooter returns the Footer field value if set, zero value otherwise.
func (o *BrandingThemeConfiguration) GetFooter() string {
	if o == nil || o.Footer == nil {
		var ret string
		return ret
	}
	return *o.Footer
}

// GetFooterOk returns a tuple with the Footer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandingThemeConfiguration) GetFooterOk() (*string, bool) {
	if o == nil || o.Footer == nil {
		return nil, false
	}
	return o.Footer, true
}

// HasFooter returns a boolean if a field has been set.
func (o *BrandingThemeConfiguration) HasFooter() bool {
	if o != nil && o.Footer != nil {
		return true
	}

	return false
}

// SetFooter gets a reference to the given string and assigns it to the Footer field.
func (o *BrandingThemeConfiguration) SetFooter(v string) {
	o.Footer = &v
}

// GetHeadingTextColor returns the HeadingTextColor field value if set, zero value otherwise.
func (o *BrandingThemeConfiguration) GetHeadingTextColor() string {
	if o == nil || o.HeadingTextColor == nil {
		var ret string
		return ret
	}
	return *o.HeadingTextColor
}

// GetHeadingTextColorOk returns a tuple with the HeadingTextColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandingThemeConfiguration) GetHeadingTextColorOk() (*string, bool) {
	if o == nil || o.HeadingTextColor == nil {
		return nil, false
	}
	return o.HeadingTextColor, true
}

// HasHeadingTextColor returns a boolean if a field has been set.
func (o *BrandingThemeConfiguration) HasHeadingTextColor() bool {
	if o != nil && o.HeadingTextColor != nil {
		return true
	}

	return false
}

// SetHeadingTextColor gets a reference to the given string and assigns it to the HeadingTextColor field.
func (o *BrandingThemeConfiguration) SetHeadingTextColor(v string) {
	o.HeadingTextColor = &v
}

// GetLinkTextColor returns the LinkTextColor field value if set, zero value otherwise.
func (o *BrandingThemeConfiguration) GetLinkTextColor() string {
	if o == nil || o.LinkTextColor == nil {
		var ret string
		return ret
	}
	return *o.LinkTextColor
}

// GetLinkTextColorOk returns a tuple with the LinkTextColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandingThemeConfiguration) GetLinkTextColorOk() (*string, bool) {
	if o == nil || o.LinkTextColor == nil {
		return nil, false
	}
	return o.LinkTextColor, true
}

// HasLinkTextColor returns a boolean if a field has been set.
func (o *BrandingThemeConfiguration) HasLinkTextColor() bool {
	if o != nil && o.LinkTextColor != nil {
		return true
	}

	return false
}

// SetLinkTextColor gets a reference to the given string and assigns it to the LinkTextColor field.
func (o *BrandingThemeConfiguration) SetLinkTextColor(v string) {
	o.LinkTextColor = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *BrandingThemeConfiguration) GetLogo() BrandingThemeConfigurationLogo {
	if o == nil || o.Logo == nil {
		var ret BrandingThemeConfigurationLogo
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandingThemeConfiguration) GetLogoOk() (*BrandingThemeConfigurationLogo, bool) {
	if o == nil || o.Logo == nil {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *BrandingThemeConfiguration) HasLogo() bool {
	if o != nil && o.Logo != nil {
		return true
	}

	return false
}

// SetLogo gets a reference to the given BrandingThemeConfigurationLogo and assigns it to the Logo field.
func (o *BrandingThemeConfiguration) SetLogo(v BrandingThemeConfigurationLogo) {
	o.Logo = &v
}

// GetLogoType returns the LogoType field value
func (o *BrandingThemeConfiguration) GetLogoType() EnumBrandingLogoType {
	if o == nil {
		var ret EnumBrandingLogoType
		return ret
	}

	return o.LogoType
}

// GetLogoTypeOk returns a tuple with the LogoType field value
// and a boolean to check if the value has been set.
func (o *BrandingThemeConfiguration) GetLogoTypeOk() (*EnumBrandingLogoType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogoType, true
}

// SetLogoType sets field value
func (o *BrandingThemeConfiguration) SetLogoType(v EnumBrandingLogoType) {
	o.LogoType = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BrandingThemeConfiguration) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandingThemeConfiguration) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BrandingThemeConfiguration) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BrandingThemeConfiguration) SetName(v string) {
	o.Name = &v
}

func (o BrandingThemeConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["backgroundColor"] = o.BackgroundColor
	}
	if true {
		toSerialize["backgroundType"] = o.BackgroundType
	}
	if o.BackgroundImage != nil {
		toSerialize["backgroundImage"] = o.BackgroundImage
	}
	if o.BodyTextColor != nil {
		toSerialize["bodyTextColor"] = o.BodyTextColor
	}
	if o.ButtonColor != nil {
		toSerialize["buttonColor"] = o.ButtonColor
	}
	if o.ButtonTextColor != nil {
		toSerialize["buttonTextColor"] = o.ButtonTextColor
	}
	if o.CardColor != nil {
		toSerialize["cardColor"] = o.CardColor
	}
	if o.Footer != nil {
		toSerialize["footer"] = o.Footer
	}
	if o.HeadingTextColor != nil {
		toSerialize["headingTextColor"] = o.HeadingTextColor
	}
	if o.LinkTextColor != nil {
		toSerialize["linkTextColor"] = o.LinkTextColor
	}
	if o.Logo != nil {
		toSerialize["logo"] = o.Logo
	}
	if true {
		toSerialize["logoType"] = o.LogoType
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableBrandingThemeConfiguration struct {
	value *BrandingThemeConfiguration
	isSet bool
}

func (v NullableBrandingThemeConfiguration) Get() *BrandingThemeConfiguration {
	return v.value
}

func (v *NullableBrandingThemeConfiguration) Set(val *BrandingThemeConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableBrandingThemeConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableBrandingThemeConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrandingThemeConfiguration(val *BrandingThemeConfiguration) *NullableBrandingThemeConfiguration {
	return &NullableBrandingThemeConfiguration{value: val, isSet: true}
}

func (v NullableBrandingThemeConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrandingThemeConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


