/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-08-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumRoleName The name of the role
type EnumRoleName string

// List of EnumRoleName
const (
	ENUMROLENAME_ORGANIZATION_ADMIN EnumRoleName = "Organization Admin"
	ENUMROLENAME_ENVIRONMENT_ADMIN EnumRoleName = "Environment Admin"
	ENUMROLENAME_IDENTITY_DATA_ADMIN EnumRoleName = "Identity Data Admin"
	ENUMROLENAME_CLIENT_APPLICATION_DEVELOPER EnumRoleName = "Client Application Developer"
	ENUMROLENAME_IDENTITY_DATA_READ_ONLY EnumRoleName = "Identity Data Read Only"
	ENUMROLENAME_CONFIGURATION_READ_ONLY EnumRoleName = "Configuration Read Only"
	ENUMROLENAME_PING_FEDERATE_ADMINISTRATOR EnumRoleName = "PingFederate Administrator"
	ENUMROLENAME_PING_FEDERATE_EXPRESSION_ADMINISTRATOR EnumRoleName = "PingFederate Expression Administrator"
	ENUMROLENAME_PING_FEDERATE_CRYPTO_ADMINISTRATOR EnumRoleName = "PingFederate Crypto Administrator"
	ENUMROLENAME_PING_FEDERATE_USER_ADMINISTRATOR EnumRoleName = "PingFederate User Administrator"
	ENUMROLENAME_PING_FEDERATE_AUDITOR EnumRoleName = "PingFederate Auditor"
)

// All allowed values of EnumRoleName enum
var AllowedEnumRoleNameEnumValues = []EnumRoleName{
	"Organization Admin",
	"Environment Admin",
	"Identity Data Admin",
	"Client Application Developer",
	"Identity Data Read Only",
	"Configuration Read Only",
	"PingFederate Administrator",
	"PingFederate Expression Administrator",
	"PingFederate Crypto Administrator",
	"PingFederate User Administrator",
	"PingFederate Auditor",
}

func (v *EnumRoleName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumRoleName(value)
	for _, existing := range AllowedEnumRoleNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumRoleName", value)
}

// NewEnumRoleNameFromValue returns a pointer to a valid EnumRoleName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumRoleNameFromValue(v string) (*EnumRoleName, error) {
	ev := EnumRoleName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumRoleName: valid values are %v", v, AllowedEnumRoleNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumRoleName) IsValid() bool {
	for _, existing := range AllowedEnumRoleNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumRoleName value
func (v EnumRoleName) Ptr() *EnumRoleName {
	return &v
}

type NullableEnumRoleName struct {
	value *EnumRoleName
	isSet bool
}

func (v NullableEnumRoleName) Get() *EnumRoleName {
	return v.value
}

func (v *NullableEnumRoleName) Set(val *EnumRoleName) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumRoleName) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumRoleName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumRoleName(val *EnumRoleName) *NullableEnumRoleName {
	return &NullableEnumRoleName{value: val, isSet: true}
}

func (v NullableEnumRoleName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumRoleName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

