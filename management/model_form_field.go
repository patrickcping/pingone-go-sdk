/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-08-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// FormField - struct for FormField
type FormField struct {
	FormFieldCheckbox *FormFieldCheckbox
	FormFieldCombobox *FormFieldCombobox
	FormFieldDivider *FormFieldDivider
	FormFieldDropdown *FormFieldDropdown
	FormFieldEmptyField *FormFieldEmptyField
	FormFieldErrorDisplay *FormFieldErrorDisplay
	FormFieldFlowButton *FormFieldFlowButton
	FormFieldFlowLink *FormFieldFlowLink
	FormFieldPassword *FormFieldPassword
	FormFieldPasswordVerify *FormFieldPasswordVerify
	FormFieldQrCode *FormFieldQrCode
	FormFieldRadio *FormFieldRadio
	FormFieldRecaptchaV2 *FormFieldRecaptchaV2
	FormFieldSocialLoginButton *FormFieldSocialLoginButton
	FormFieldSubmitButton *FormFieldSubmitButton
	FormFieldText *FormFieldText
	FormFieldTextblobslateTextblob *FormFieldTextblobslateTextblob
}

// FormFieldCheckboxAsFormField is a convenience function that returns FormFieldCheckbox wrapped in FormField
func FormFieldCheckboxAsFormField(v *FormFieldCheckbox) FormField {
	return FormField{
		FormFieldCheckbox: v,
	}
}

// FormFieldComboboxAsFormField is a convenience function that returns FormFieldCombobox wrapped in FormField
func FormFieldComboboxAsFormField(v *FormFieldCombobox) FormField {
	return FormField{
		FormFieldCombobox: v,
	}
}

// FormFieldDividerAsFormField is a convenience function that returns FormFieldDivider wrapped in FormField
func FormFieldDividerAsFormField(v *FormFieldDivider) FormField {
	return FormField{
		FormFieldDivider: v,
	}
}

// FormFieldDropdownAsFormField is a convenience function that returns FormFieldDropdown wrapped in FormField
func FormFieldDropdownAsFormField(v *FormFieldDropdown) FormField {
	return FormField{
		FormFieldDropdown: v,
	}
}

// FormFieldEmptyFieldAsFormField is a convenience function that returns FormFieldEmptyField wrapped in FormField
func FormFieldEmptyFieldAsFormField(v *FormFieldEmptyField) FormField {
	return FormField{
		FormFieldEmptyField: v,
	}
}

// FormFieldErrorDisplayAsFormField is a convenience function that returns FormFieldErrorDisplay wrapped in FormField
func FormFieldErrorDisplayAsFormField(v *FormFieldErrorDisplay) FormField {
	return FormField{
		FormFieldErrorDisplay: v,
	}
}

// FormFieldFlowButtonAsFormField is a convenience function that returns FormFieldFlowButton wrapped in FormField
func FormFieldFlowButtonAsFormField(v *FormFieldFlowButton) FormField {
	return FormField{
		FormFieldFlowButton: v,
	}
}

// FormFieldFlowLinkAsFormField is a convenience function that returns FormFieldFlowLink wrapped in FormField
func FormFieldFlowLinkAsFormField(v *FormFieldFlowLink) FormField {
	return FormField{
		FormFieldFlowLink: v,
	}
}

// FormFieldPasswordAsFormField is a convenience function that returns FormFieldPassword wrapped in FormField
func FormFieldPasswordAsFormField(v *FormFieldPassword) FormField {
	return FormField{
		FormFieldPassword: v,
	}
}

// FormFieldPasswordVerifyAsFormField is a convenience function that returns FormFieldPasswordVerify wrapped in FormField
func FormFieldPasswordVerifyAsFormField(v *FormFieldPasswordVerify) FormField {
	return FormField{
		FormFieldPasswordVerify: v,
	}
}

// FormFieldQrCodeAsFormField is a convenience function that returns FormFieldQrCode wrapped in FormField
func FormFieldQrCodeAsFormField(v *FormFieldQrCode) FormField {
	return FormField{
		FormFieldQrCode: v,
	}
}

// FormFieldRadioAsFormField is a convenience function that returns FormFieldRadio wrapped in FormField
func FormFieldRadioAsFormField(v *FormFieldRadio) FormField {
	return FormField{
		FormFieldRadio: v,
	}
}

// FormFieldRecaptchaV2AsFormField is a convenience function that returns FormFieldRecaptchaV2 wrapped in FormField
func FormFieldRecaptchaV2AsFormField(v *FormFieldRecaptchaV2) FormField {
	return FormField{
		FormFieldRecaptchaV2: v,
	}
}

// FormFieldSocialLoginButtonAsFormField is a convenience function that returns FormFieldSocialLoginButton wrapped in FormField
func FormFieldSocialLoginButtonAsFormField(v *FormFieldSocialLoginButton) FormField {
	return FormField{
		FormFieldSocialLoginButton: v,
	}
}

// FormFieldSubmitButtonAsFormField is a convenience function that returns FormFieldSubmitButton wrapped in FormField
func FormFieldSubmitButtonAsFormField(v *FormFieldSubmitButton) FormField {
	return FormField{
		FormFieldSubmitButton: v,
	}
}

// FormFieldTextAsFormField is a convenience function that returns FormFieldText wrapped in FormField
func FormFieldTextAsFormField(v *FormFieldText) FormField {
	return FormField{
		FormFieldText: v,
	}
}

// FormFieldTextblobslateTextblobAsFormField is a convenience function that returns FormFieldTextblobslateTextblob wrapped in FormField
func FormFieldTextblobslateTextblobAsFormField(v *FormFieldTextblobslateTextblob) FormField {
	return FormField{
		FormFieldTextblobslateTextblob: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FormField) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FormFieldCheckbox
	err = newStrictDecoder(data).Decode(&dst.FormFieldCheckbox)
	if err == nil {
		jsonFormFieldCheckbox, _ := json.Marshal(dst.FormFieldCheckbox)
		if string(jsonFormFieldCheckbox) == "{}" { // empty struct
			dst.FormFieldCheckbox = nil
		} else {
			match++
		}
	} else {
		dst.FormFieldCheckbox = nil
	}

	// try to unmarshal data into FormFieldCombobox
	err = newStrictDecoder(data).Decode(&dst.FormFieldCombobox)
	if err == nil {
		jsonFormFieldCombobox, _ := json.Marshal(dst.FormFieldCombobox)
		if string(jsonFormFieldCombobox) == "{}" { // empty struct
			dst.FormFieldCombobox = nil
		} else {
			match++
		}
	} else {
		dst.FormFieldCombobox = nil
	}

	// try to unmarshal data into FormFieldDivider
	err = newStrictDecoder(data).Decode(&dst.FormFieldDivider)
	if err == nil {
		jsonFormFieldDivider, _ := json.Marshal(dst.FormFieldDivider)
		if string(jsonFormFieldDivider) == "{}" { // empty struct
			dst.FormFieldDivider = nil
		} else {
			match++
		}
	} else {
		dst.FormFieldDivider = nil
	}

	// try to unmarshal data into FormFieldDropdown
	err = newStrictDecoder(data).Decode(&dst.FormFieldDropdown)
	if err == nil {
		jsonFormFieldDropdown, _ := json.Marshal(dst.FormFieldDropdown)
		if string(jsonFormFieldDropdown) == "{}" { // empty struct
			dst.FormFieldDropdown = nil
		} else {
			match++
		}
	} else {
		dst.FormFieldDropdown = nil
	}

	// try to unmarshal data into FormFieldEmptyField
	err = newStrictDecoder(data).Decode(&dst.FormFieldEmptyField)
	if err == nil {
		jsonFormFieldEmptyField, _ := json.Marshal(dst.FormFieldEmptyField)
		if string(jsonFormFieldEmptyField) == "{}" { // empty struct
			dst.FormFieldEmptyField = nil
		} else {
			match++
		}
	} else {
		dst.FormFieldEmptyField = nil
	}

	// try to unmarshal data into FormFieldErrorDisplay
	err = newStrictDecoder(data).Decode(&dst.FormFieldErrorDisplay)
	if err == nil {
		jsonFormFieldErrorDisplay, _ := json.Marshal(dst.FormFieldErrorDisplay)
		if string(jsonFormFieldErrorDisplay) == "{}" { // empty struct
			dst.FormFieldErrorDisplay = nil
		} else {
			match++
		}
	} else {
		dst.FormFieldErrorDisplay = nil
	}

	// try to unmarshal data into FormFieldFlowButton
	err = newStrictDecoder(data).Decode(&dst.FormFieldFlowButton)
	if err == nil {
		jsonFormFieldFlowButton, _ := json.Marshal(dst.FormFieldFlowButton)
		if string(jsonFormFieldFlowButton) == "{}" { // empty struct
			dst.FormFieldFlowButton = nil
		} else {
			match++
		}
	} else {
		dst.FormFieldFlowButton = nil
	}

	// try to unmarshal data into FormFieldFlowLink
	err = newStrictDecoder(data).Decode(&dst.FormFieldFlowLink)
	if err == nil {
		jsonFormFieldFlowLink, _ := json.Marshal(dst.FormFieldFlowLink)
		if string(jsonFormFieldFlowLink) == "{}" { // empty struct
			dst.FormFieldFlowLink = nil
		} else {
			match++
		}
	} else {
		dst.FormFieldFlowLink = nil
	}

	// try to unmarshal data into FormFieldPassword
	err = newStrictDecoder(data).Decode(&dst.FormFieldPassword)
	if err == nil {
		jsonFormFieldPassword, _ := json.Marshal(dst.FormFieldPassword)
		if string(jsonFormFieldPassword) == "{}" { // empty struct
			dst.FormFieldPassword = nil
		} else {
			match++
		}
	} else {
		dst.FormFieldPassword = nil
	}

	// try to unmarshal data into FormFieldPasswordVerify
	err = newStrictDecoder(data).Decode(&dst.FormFieldPasswordVerify)
	if err == nil {
		jsonFormFieldPasswordVerify, _ := json.Marshal(dst.FormFieldPasswordVerify)
		if string(jsonFormFieldPasswordVerify) == "{}" { // empty struct
			dst.FormFieldPasswordVerify = nil
		} else {
			match++
		}
	} else {
		dst.FormFieldPasswordVerify = nil
	}

	// try to unmarshal data into FormFieldQrCode
	err = newStrictDecoder(data).Decode(&dst.FormFieldQrCode)
	if err == nil {
		jsonFormFieldQrCode, _ := json.Marshal(dst.FormFieldQrCode)
		if string(jsonFormFieldQrCode) == "{}" { // empty struct
			dst.FormFieldQrCode = nil
		} else {
			match++
		}
	} else {
		dst.FormFieldQrCode = nil
	}

	// try to unmarshal data into FormFieldRadio
	err = newStrictDecoder(data).Decode(&dst.FormFieldRadio)
	if err == nil {
		jsonFormFieldRadio, _ := json.Marshal(dst.FormFieldRadio)
		if string(jsonFormFieldRadio) == "{}" { // empty struct
			dst.FormFieldRadio = nil
		} else {
			match++
		}
	} else {
		dst.FormFieldRadio = nil
	}

	// try to unmarshal data into FormFieldRecaptchaV2
	err = newStrictDecoder(data).Decode(&dst.FormFieldRecaptchaV2)
	if err == nil {
		jsonFormFieldRecaptchaV2, _ := json.Marshal(dst.FormFieldRecaptchaV2)
		if string(jsonFormFieldRecaptchaV2) == "{}" { // empty struct
			dst.FormFieldRecaptchaV2 = nil
		} else {
			match++
		}
	} else {
		dst.FormFieldRecaptchaV2 = nil
	}

	// try to unmarshal data into FormFieldSocialLoginButton
	err = newStrictDecoder(data).Decode(&dst.FormFieldSocialLoginButton)
	if err == nil {
		jsonFormFieldSocialLoginButton, _ := json.Marshal(dst.FormFieldSocialLoginButton)
		if string(jsonFormFieldSocialLoginButton) == "{}" { // empty struct
			dst.FormFieldSocialLoginButton = nil
		} else {
			match++
		}
	} else {
		dst.FormFieldSocialLoginButton = nil
	}

	// try to unmarshal data into FormFieldSubmitButton
	err = newStrictDecoder(data).Decode(&dst.FormFieldSubmitButton)
	if err == nil {
		jsonFormFieldSubmitButton, _ := json.Marshal(dst.FormFieldSubmitButton)
		if string(jsonFormFieldSubmitButton) == "{}" { // empty struct
			dst.FormFieldSubmitButton = nil
		} else {
			match++
		}
	} else {
		dst.FormFieldSubmitButton = nil
	}

	// try to unmarshal data into FormFieldText
	err = newStrictDecoder(data).Decode(&dst.FormFieldText)
	if err == nil {
		jsonFormFieldText, _ := json.Marshal(dst.FormFieldText)
		if string(jsonFormFieldText) == "{}" { // empty struct
			dst.FormFieldText = nil
		} else {
			match++
		}
	} else {
		dst.FormFieldText = nil
	}

	// try to unmarshal data into FormFieldTextblobslateTextblob
	err = newStrictDecoder(data).Decode(&dst.FormFieldTextblobslateTextblob)
	if err == nil {
		jsonFormFieldTextblobslateTextblob, _ := json.Marshal(dst.FormFieldTextblobslateTextblob)
		if string(jsonFormFieldTextblobslateTextblob) == "{}" { // empty struct
			dst.FormFieldTextblobslateTextblob = nil
		} else {
			match++
		}
	} else {
		dst.FormFieldTextblobslateTextblob = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FormFieldCheckbox = nil
		dst.FormFieldCombobox = nil
		dst.FormFieldDivider = nil
		dst.FormFieldDropdown = nil
		dst.FormFieldEmptyField = nil
		dst.FormFieldErrorDisplay = nil
		dst.FormFieldFlowButton = nil
		dst.FormFieldFlowLink = nil
		dst.FormFieldPassword = nil
		dst.FormFieldPasswordVerify = nil
		dst.FormFieldQrCode = nil
		dst.FormFieldRadio = nil
		dst.FormFieldRecaptchaV2 = nil
		dst.FormFieldSocialLoginButton = nil
		dst.FormFieldSubmitButton = nil
		dst.FormFieldText = nil
		dst.FormFieldTextblobslateTextblob = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FormField)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FormField)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FormField) MarshalJSON() ([]byte, error) {
	if src.FormFieldCheckbox != nil {
		return json.Marshal(&src.FormFieldCheckbox)
	}

	if src.FormFieldCombobox != nil {
		return json.Marshal(&src.FormFieldCombobox)
	}

	if src.FormFieldDivider != nil {
		return json.Marshal(&src.FormFieldDivider)
	}

	if src.FormFieldDropdown != nil {
		return json.Marshal(&src.FormFieldDropdown)
	}

	if src.FormFieldEmptyField != nil {
		return json.Marshal(&src.FormFieldEmptyField)
	}

	if src.FormFieldErrorDisplay != nil {
		return json.Marshal(&src.FormFieldErrorDisplay)
	}

	if src.FormFieldFlowButton != nil {
		return json.Marshal(&src.FormFieldFlowButton)
	}

	if src.FormFieldFlowLink != nil {
		return json.Marshal(&src.FormFieldFlowLink)
	}

	if src.FormFieldPassword != nil {
		return json.Marshal(&src.FormFieldPassword)
	}

	if src.FormFieldPasswordVerify != nil {
		return json.Marshal(&src.FormFieldPasswordVerify)
	}

	if src.FormFieldQrCode != nil {
		return json.Marshal(&src.FormFieldQrCode)
	}

	if src.FormFieldRadio != nil {
		return json.Marshal(&src.FormFieldRadio)
	}

	if src.FormFieldRecaptchaV2 != nil {
		return json.Marshal(&src.FormFieldRecaptchaV2)
	}

	if src.FormFieldSocialLoginButton != nil {
		return json.Marshal(&src.FormFieldSocialLoginButton)
	}

	if src.FormFieldSubmitButton != nil {
		return json.Marshal(&src.FormFieldSubmitButton)
	}

	if src.FormFieldText != nil {
		return json.Marshal(&src.FormFieldText)
	}

	if src.FormFieldTextblobslateTextblob != nil {
		return json.Marshal(&src.FormFieldTextblobslateTextblob)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FormField) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FormFieldCheckbox != nil {
		return obj.FormFieldCheckbox
	}

	if obj.FormFieldCombobox != nil {
		return obj.FormFieldCombobox
	}

	if obj.FormFieldDivider != nil {
		return obj.FormFieldDivider
	}

	if obj.FormFieldDropdown != nil {
		return obj.FormFieldDropdown
	}

	if obj.FormFieldEmptyField != nil {
		return obj.FormFieldEmptyField
	}

	if obj.FormFieldErrorDisplay != nil {
		return obj.FormFieldErrorDisplay
	}

	if obj.FormFieldFlowButton != nil {
		return obj.FormFieldFlowButton
	}

	if obj.FormFieldFlowLink != nil {
		return obj.FormFieldFlowLink
	}

	if obj.FormFieldPassword != nil {
		return obj.FormFieldPassword
	}

	if obj.FormFieldPasswordVerify != nil {
		return obj.FormFieldPasswordVerify
	}

	if obj.FormFieldQrCode != nil {
		return obj.FormFieldQrCode
	}

	if obj.FormFieldRadio != nil {
		return obj.FormFieldRadio
	}

	if obj.FormFieldRecaptchaV2 != nil {
		return obj.FormFieldRecaptchaV2
	}

	if obj.FormFieldSocialLoginButton != nil {
		return obj.FormFieldSocialLoginButton
	}

	if obj.FormFieldSubmitButton != nil {
		return obj.FormFieldSubmitButton
	}

	if obj.FormFieldText != nil {
		return obj.FormFieldText
	}

	if obj.FormFieldTextblobslateTextblob != nil {
		return obj.FormFieldTextblobslateTextblob
	}

	// all schemas are nil
	return nil
}

type NullableFormField struct {
	value *FormField
	isSet bool
}

func (v NullableFormField) Get() *FormField {
	return v.value
}

func (v *NullableFormField) Set(val *FormField) {
	v.value = val
	v.isSet = true
}

func (v NullableFormField) IsSet() bool {
	return v.isSet
}

func (v *NullableFormField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormField(val *FormField) *NullableFormField {
	return &NullableFormField{value: val, isSet: true}
}

func (v NullableFormField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


