/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-07-18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EntityArrayEmbeddedAttributes - struct for EntityArrayEmbeddedAttributes
type EntityArrayEmbeddedAttributes struct {
	ArrayOfApplicationAttributeMapping *[]ApplicationAttributeMapping
	ArrayOfIdentityProviderAttribute *[]IdentityProviderAttribute
	ArrayOfResourceAttribute *[]ResourceAttribute
	ArrayOfSchemaAttribute *[]SchemaAttribute
}

// []ApplicationAttributeMappingAsEntityArrayEmbeddedAttributes is a convenience function that returns []ApplicationAttributeMapping wrapped in EntityArrayEmbeddedAttributes
func ArrayOfApplicationAttributeMappingAsEntityArrayEmbeddedAttributes(v *[]ApplicationAttributeMapping) EntityArrayEmbeddedAttributes {
	return EntityArrayEmbeddedAttributes{
		ArrayOfApplicationAttributeMapping: v,
	}
}

// []IdentityProviderAttributeAsEntityArrayEmbeddedAttributes is a convenience function that returns []IdentityProviderAttribute wrapped in EntityArrayEmbeddedAttributes
func ArrayOfIdentityProviderAttributeAsEntityArrayEmbeddedAttributes(v *[]IdentityProviderAttribute) EntityArrayEmbeddedAttributes {
	return EntityArrayEmbeddedAttributes{
		ArrayOfIdentityProviderAttribute: v,
	}
}

// []ResourceAttributeAsEntityArrayEmbeddedAttributes is a convenience function that returns []ResourceAttribute wrapped in EntityArrayEmbeddedAttributes
func ArrayOfResourceAttributeAsEntityArrayEmbeddedAttributes(v *[]ResourceAttribute) EntityArrayEmbeddedAttributes {
	return EntityArrayEmbeddedAttributes{
		ArrayOfResourceAttribute: v,
	}
}

// []SchemaAttributeAsEntityArrayEmbeddedAttributes is a convenience function that returns []SchemaAttribute wrapped in EntityArrayEmbeddedAttributes
func ArrayOfSchemaAttributeAsEntityArrayEmbeddedAttributes(v *[]SchemaAttribute) EntityArrayEmbeddedAttributes {
	return EntityArrayEmbeddedAttributes{
		ArrayOfSchemaAttribute: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EntityArrayEmbeddedAttributes) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfApplicationAttributeMapping
	err = newStrictDecoder(data).Decode(&dst.ArrayOfApplicationAttributeMapping)
	if err == nil {
		jsonArrayOfApplicationAttributeMapping, _ := json.Marshal(dst.ArrayOfApplicationAttributeMapping)
		if string(jsonArrayOfApplicationAttributeMapping) == "{}" { // empty struct
			dst.ArrayOfApplicationAttributeMapping = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfApplicationAttributeMapping = nil
	}

	// try to unmarshal data into ArrayOfIdentityProviderAttribute
	err = newStrictDecoder(data).Decode(&dst.ArrayOfIdentityProviderAttribute)
	if err == nil {
		jsonArrayOfIdentityProviderAttribute, _ := json.Marshal(dst.ArrayOfIdentityProviderAttribute)
		if string(jsonArrayOfIdentityProviderAttribute) == "{}" { // empty struct
			dst.ArrayOfIdentityProviderAttribute = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfIdentityProviderAttribute = nil
	}

	// try to unmarshal data into ArrayOfResourceAttribute
	err = newStrictDecoder(data).Decode(&dst.ArrayOfResourceAttribute)
	if err == nil {
		jsonArrayOfResourceAttribute, _ := json.Marshal(dst.ArrayOfResourceAttribute)
		if string(jsonArrayOfResourceAttribute) == "{}" { // empty struct
			dst.ArrayOfResourceAttribute = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfResourceAttribute = nil
	}

	// try to unmarshal data into ArrayOfSchemaAttribute
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSchemaAttribute)
	if err == nil {
		jsonArrayOfSchemaAttribute, _ := json.Marshal(dst.ArrayOfSchemaAttribute)
		if string(jsonArrayOfSchemaAttribute) == "{}" { // empty struct
			dst.ArrayOfSchemaAttribute = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfSchemaAttribute = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfApplicationAttributeMapping = nil
		dst.ArrayOfIdentityProviderAttribute = nil
		dst.ArrayOfResourceAttribute = nil
		dst.ArrayOfSchemaAttribute = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(EntityArrayEmbeddedAttributes)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(EntityArrayEmbeddedAttributes)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EntityArrayEmbeddedAttributes) MarshalJSON() ([]byte, error) {
	if src.ArrayOfApplicationAttributeMapping != nil {
		return json.Marshal(&src.ArrayOfApplicationAttributeMapping)
	}

	if src.ArrayOfIdentityProviderAttribute != nil {
		return json.Marshal(&src.ArrayOfIdentityProviderAttribute)
	}

	if src.ArrayOfResourceAttribute != nil {
		return json.Marshal(&src.ArrayOfResourceAttribute)
	}

	if src.ArrayOfSchemaAttribute != nil {
		return json.Marshal(&src.ArrayOfSchemaAttribute)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EntityArrayEmbeddedAttributes) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfApplicationAttributeMapping != nil {
		return obj.ArrayOfApplicationAttributeMapping
	}

	if obj.ArrayOfIdentityProviderAttribute != nil {
		return obj.ArrayOfIdentityProviderAttribute
	}

	if obj.ArrayOfResourceAttribute != nil {
		return obj.ArrayOfResourceAttribute
	}

	if obj.ArrayOfSchemaAttribute != nil {
		return obj.ArrayOfSchemaAttribute
	}

	// all schemas are nil
	return nil
}

type NullableEntityArrayEmbeddedAttributes struct {
	value *EntityArrayEmbeddedAttributes
	isSet bool
}

func (v NullableEntityArrayEmbeddedAttributes) Get() *EntityArrayEmbeddedAttributes {
	return v.value
}

func (v *NullableEntityArrayEmbeddedAttributes) Set(val *EntityArrayEmbeddedAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityArrayEmbeddedAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityArrayEmbeddedAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityArrayEmbeddedAttributes(val *EntityArrayEmbeddedAttributes) *NullableEntityArrayEmbeddedAttributes {
	return &NullableEntityArrayEmbeddedAttributes{value: val, isSet: true}
}

func (v NullableEntityArrayEmbeddedAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityArrayEmbeddedAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


