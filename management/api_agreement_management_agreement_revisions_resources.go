/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-07-14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// AgreementManagementAgreementRevisionsResourcesApiService AgreementManagementAgreementRevisionsResourcesApi service
type AgreementManagementAgreementRevisionsResourcesApiService service

type ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGetRequest struct {
	ctx context.Context
	ApiService *AgreementManagementAgreementRevisionsResourcesApiService
	environmentID string
	agreementID string
	languageID string
}

func (r ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGetExecute(r)
}

/*
V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet READ All Revisions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param agreementID
 @param languageID
 @return ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGetRequest
*/
func (a *AgreementManagementAgreementRevisionsResourcesApiService) V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet(ctx context.Context, environmentID string, agreementID string, languageID string) ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGetRequest {
	return ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGetRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		agreementID: agreementID,
		languageID: languageID,
	}
}

// Execute executes the request
func (a *AgreementManagementAgreementRevisionsResourcesApiService) V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGetExecute(r ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementManagementAgreementRevisionsResourcesApiService.V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/agreements/{agreementID}/languages/{languageID}/revisions"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementID"+"}", url.PathEscape(parameterToString(r.agreementID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"languageID"+"}", url.PathEscape(parameterToString(r.languageID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPostRequest struct {
	ctx context.Context
	ApiService *AgreementManagementAgreementRevisionsResourcesApiService
	environmentID string
	agreementID string
	languageID string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPostRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPostRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPostExecute(r)
}

/*
V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost CREATE Revision

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param agreementID
 @param languageID
 @return ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPostRequest
*/
func (a *AgreementManagementAgreementRevisionsResourcesApiService) V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost(ctx context.Context, environmentID string, agreementID string, languageID string) ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPostRequest {
	return ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPostRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		agreementID: agreementID,
		languageID: languageID,
	}
}

// Execute executes the request
func (a *AgreementManagementAgreementRevisionsResourcesApiService) V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPostExecute(r ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementManagementAgreementRevisionsResourcesApiService.V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/agreements/{agreementID}/languages/{languageID}/revisions"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementID"+"}", url.PathEscape(parameterToString(r.agreementID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"languageID"+"}", url.PathEscape(parameterToString(r.languageID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDDeleteRequest struct {
	ctx context.Context
	ApiService *AgreementManagementAgreementRevisionsResourcesApiService
	environmentID string
	agreementID string
	languageID string
	revisionID string
}

func (r ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDDeleteExecute(r)
}

/*
V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDDelete DELETE Revision

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param agreementID
 @param languageID
 @param revisionID
 @return ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDDeleteRequest
*/
func (a *AgreementManagementAgreementRevisionsResourcesApiService) V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDDelete(ctx context.Context, environmentID string, agreementID string, languageID string, revisionID string) ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDDeleteRequest {
	return ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDDeleteRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		agreementID: agreementID,
		languageID: languageID,
		revisionID: revisionID,
	}
}

// Execute executes the request
func (a *AgreementManagementAgreementRevisionsResourcesApiService) V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDDeleteExecute(r ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementManagementAgreementRevisionsResourcesApiService.V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/agreements/{agreementID}/languages/{languageID}/revisions/{revisionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementID"+"}", url.PathEscape(parameterToString(r.agreementID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"languageID"+"}", url.PathEscape(parameterToString(r.languageID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"revisionID"+"}", url.PathEscape(parameterToString(r.revisionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGetRequest struct {
	ctx context.Context
	ApiService *AgreementManagementAgreementRevisionsResourcesApiService
	environmentID string
	agreementID string
	languageID string
	revisionID string
}

func (r ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGetExecute(r)
}

/*
V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet READ One Revision

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param agreementID
 @param languageID
 @param revisionID
 @return ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGetRequest
*/
func (a *AgreementManagementAgreementRevisionsResourcesApiService) V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet(ctx context.Context, environmentID string, agreementID string, languageID string, revisionID string) ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGetRequest {
	return ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGetRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		agreementID: agreementID,
		languageID: languageID,
		revisionID: revisionID,
	}
}

// Execute executes the request
func (a *AgreementManagementAgreementRevisionsResourcesApiService) V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGetExecute(r ApiV1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementManagementAgreementRevisionsResourcesApiService.V1EnvironmentsEnvironmentIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/agreements/{agreementID}/languages/{languageID}/revisions/{revisionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementID"+"}", url.PathEscape(parameterToString(r.agreementID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"languageID"+"}", url.PathEscape(parameterToString(r.languageID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"revisionID"+"}", url.PathEscape(parameterToString(r.revisionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
