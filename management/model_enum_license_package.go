/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-08-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumLicensePackage A string that specifies the license template on which this license is based. This is a required property. Options are `TRIAL`, `STANDARD`, `PREMIUM`, `MFA`, `RISK`, `MFARISK`, and `GLOBAL`.
type EnumLicensePackage string

// List of EnumLicensePackage
const (
	ENUMLICENSEPACKAGE_ADMIN EnumLicensePackage = "ADMIN"
	ENUMLICENSEPACKAGE_INTERNAL EnumLicensePackage = "INTERNAL"
	ENUMLICENSEPACKAGE_TRIAL EnumLicensePackage = "TRIAL"
	ENUMLICENSEPACKAGE_STANDARD EnumLicensePackage = "STANDARD"
	ENUMLICENSEPACKAGE_PREMIUM EnumLicensePackage = "PREMIUM"
	ENUMLICENSEPACKAGE_MFA EnumLicensePackage = "MFA"
	ENUMLICENSEPACKAGE_RISK EnumLicensePackage = "RISK"
	ENUMLICENSEPACKAGE_MFARISK EnumLicensePackage = "MFARISK"
	ENUMLICENSEPACKAGE_GLOBAL EnumLicensePackage = "GLOBAL"
)

// All allowed values of EnumLicensePackage enum
var AllowedEnumLicensePackageEnumValues = []EnumLicensePackage{
	"ADMIN",
	"INTERNAL",
	"TRIAL",
	"STANDARD",
	"PREMIUM",
	"MFA",
	"RISK",
	"MFARISK",
	"GLOBAL",
}

func (v *EnumLicensePackage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumLicensePackage(value)
	for _, existing := range AllowedEnumLicensePackageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumLicensePackage", value)
}

// NewEnumLicensePackageFromValue returns a pointer to a valid EnumLicensePackage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumLicensePackageFromValue(v string) (*EnumLicensePackage, error) {
	ev := EnumLicensePackage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumLicensePackage: valid values are %v", v, AllowedEnumLicensePackageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumLicensePackage) IsValid() bool {
	for _, existing := range AllowedEnumLicensePackageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumLicensePackage value
func (v EnumLicensePackage) Ptr() *EnumLicensePackage {
	return &v
}

type NullableEnumLicensePackage struct {
	value *EnumLicensePackage
	isSet bool
}

func (v NullableEnumLicensePackage) Get() *EnumLicensePackage {
	return v.value
}

func (v *NullableEnumLicensePackage) Set(val *EnumLicensePackage) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumLicensePackage) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumLicensePackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumLicensePackage(val *EnumLicensePackage) *NullableEnumLicensePackage {
	return &NullableEnumLicensePackage{value: val, isSet: true}
}

func (v NullableEnumLicensePackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumLicensePackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

