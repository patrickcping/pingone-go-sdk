/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"time"
)

// checks if the AdministratorSecurity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdministratorSecurity{}

// AdministratorSecurity struct for AdministratorSecurity
type AdministratorSecurity struct {
	AllowedMethods *EnumAdministratorSecurityAllowedMethods `json:"allowedMethods,omitempty"`
	AuthenticationMethod EnumAdministratorSecurityAuthenticationMethod `json:"authenticationMethod"`
	// The time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Environment *ObjectEnvironment `json:"environment,omitempty"`
	MfaStatus *EnumAdministratorSecurityMfaStatus `json:"mfaStatus,omitempty"`
	Policy *AdministratorSecurityPolicy `json:"policy,omitempty"`
	Provider *AdministratorSecurityProvider `json:"provider,omitempty"`
	// Indicates whether to allow account recovery within the admin policy.
	Recovery bool `json:"recovery"`
	// The time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// NewAdministratorSecurity instantiates a new AdministratorSecurity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdministratorSecurity(authenticationMethod EnumAdministratorSecurityAuthenticationMethod, recovery bool) *AdministratorSecurity {
	this := AdministratorSecurity{}
	this.AuthenticationMethod = authenticationMethod
	var mfaStatus EnumAdministratorSecurityMfaStatus = ENUMADMINISTRATORSECURITYMFASTATUS_OUT
	this.MfaStatus = &mfaStatus
	this.Recovery = recovery
	return &this
}

// NewAdministratorSecurityWithDefaults instantiates a new AdministratorSecurity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdministratorSecurityWithDefaults() *AdministratorSecurity {
	this := AdministratorSecurity{}
	var authenticationMethod EnumAdministratorSecurityAuthenticationMethod = ENUMADMINISTRATORSECURITYAUTHENTICATIONMETHOD_PINGONE
	this.AuthenticationMethod = authenticationMethod
	var mfaStatus EnumAdministratorSecurityMfaStatus = ENUMADMINISTRATORSECURITYMFASTATUS_OUT
	this.MfaStatus = &mfaStatus
	return &this
}

// GetAllowedMethods returns the AllowedMethods field value if set, zero value otherwise.
func (o *AdministratorSecurity) GetAllowedMethods() EnumAdministratorSecurityAllowedMethods {
	if o == nil || IsNil(o.AllowedMethods) {
		var ret EnumAdministratorSecurityAllowedMethods
		return ret
	}
	return *o.AllowedMethods
}

// GetAllowedMethodsOk returns a tuple with the AllowedMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdministratorSecurity) GetAllowedMethodsOk() (*EnumAdministratorSecurityAllowedMethods, bool) {
	if o == nil || IsNil(o.AllowedMethods) {
		return nil, false
	}
	return o.AllowedMethods, true
}

// HasAllowedMethods returns a boolean if a field has been set.
func (o *AdministratorSecurity) HasAllowedMethods() bool {
	if o != nil && !IsNil(o.AllowedMethods) {
		return true
	}

	return false
}

// SetAllowedMethods gets a reference to the given EnumAdministratorSecurityAllowedMethods and assigns it to the AllowedMethods field.
func (o *AdministratorSecurity) SetAllowedMethods(v EnumAdministratorSecurityAllowedMethods) {
	o.AllowedMethods = &v
}

// GetAuthenticationMethod returns the AuthenticationMethod field value
func (o *AdministratorSecurity) GetAuthenticationMethod() EnumAdministratorSecurityAuthenticationMethod {
	if o == nil {
		var ret EnumAdministratorSecurityAuthenticationMethod
		return ret
	}

	return o.AuthenticationMethod
}

// GetAuthenticationMethodOk returns a tuple with the AuthenticationMethod field value
// and a boolean to check if the value has been set.
func (o *AdministratorSecurity) GetAuthenticationMethodOk() (*EnumAdministratorSecurityAuthenticationMethod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthenticationMethod, true
}

// SetAuthenticationMethod sets field value
func (o *AdministratorSecurity) SetAuthenticationMethod(v EnumAdministratorSecurityAuthenticationMethod) {
	o.AuthenticationMethod = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AdministratorSecurity) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdministratorSecurity) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AdministratorSecurity) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *AdministratorSecurity) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *AdministratorSecurity) GetEnvironment() ObjectEnvironment {
	if o == nil || IsNil(o.Environment) {
		var ret ObjectEnvironment
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdministratorSecurity) GetEnvironmentOk() (*ObjectEnvironment, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *AdministratorSecurity) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ObjectEnvironment and assigns it to the Environment field.
func (o *AdministratorSecurity) SetEnvironment(v ObjectEnvironment) {
	o.Environment = &v
}

// GetMfaStatus returns the MfaStatus field value if set, zero value otherwise.
func (o *AdministratorSecurity) GetMfaStatus() EnumAdministratorSecurityMfaStatus {
	if o == nil || IsNil(o.MfaStatus) {
		var ret EnumAdministratorSecurityMfaStatus
		return ret
	}
	return *o.MfaStatus
}

// GetMfaStatusOk returns a tuple with the MfaStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdministratorSecurity) GetMfaStatusOk() (*EnumAdministratorSecurityMfaStatus, bool) {
	if o == nil || IsNil(o.MfaStatus) {
		return nil, false
	}
	return o.MfaStatus, true
}

// HasMfaStatus returns a boolean if a field has been set.
func (o *AdministratorSecurity) HasMfaStatus() bool {
	if o != nil && !IsNil(o.MfaStatus) {
		return true
	}

	return false
}

// SetMfaStatus gets a reference to the given EnumAdministratorSecurityMfaStatus and assigns it to the MfaStatus field.
func (o *AdministratorSecurity) SetMfaStatus(v EnumAdministratorSecurityMfaStatus) {
	o.MfaStatus = &v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *AdministratorSecurity) GetPolicy() AdministratorSecurityPolicy {
	if o == nil || IsNil(o.Policy) {
		var ret AdministratorSecurityPolicy
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdministratorSecurity) GetPolicyOk() (*AdministratorSecurityPolicy, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *AdministratorSecurity) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given AdministratorSecurityPolicy and assigns it to the Policy field.
func (o *AdministratorSecurity) SetPolicy(v AdministratorSecurityPolicy) {
	o.Policy = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *AdministratorSecurity) GetProvider() AdministratorSecurityProvider {
	if o == nil || IsNil(o.Provider) {
		var ret AdministratorSecurityProvider
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdministratorSecurity) GetProviderOk() (*AdministratorSecurityProvider, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *AdministratorSecurity) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given AdministratorSecurityProvider and assigns it to the Provider field.
func (o *AdministratorSecurity) SetProvider(v AdministratorSecurityProvider) {
	o.Provider = &v
}

// GetRecovery returns the Recovery field value
func (o *AdministratorSecurity) GetRecovery() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Recovery
}

// GetRecoveryOk returns a tuple with the Recovery field value
// and a boolean to check if the value has been set.
func (o *AdministratorSecurity) GetRecoveryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recovery, true
}

// SetRecovery sets field value
func (o *AdministratorSecurity) SetRecovery(v bool) {
	o.Recovery = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AdministratorSecurity) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdministratorSecurity) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AdministratorSecurity) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *AdministratorSecurity) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o AdministratorSecurity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdministratorSecurity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowedMethods) {
		toSerialize["allowedMethods"] = o.AllowedMethods
	}
	toSerialize["authenticationMethod"] = o.AuthenticationMethod
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.MfaStatus) {
		toSerialize["mfaStatus"] = o.MfaStatus
	}
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	toSerialize["recovery"] = o.Recovery
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableAdministratorSecurity struct {
	value *AdministratorSecurity
	isSet bool
}

func (v NullableAdministratorSecurity) Get() *AdministratorSecurity {
	return v.value
}

func (v *NullableAdministratorSecurity) Set(val *AdministratorSecurity) {
	v.value = val
	v.isSet = true
}

func (v NullableAdministratorSecurity) IsSet() bool {
	return v.isSet
}

func (v *NullableAdministratorSecurity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdministratorSecurity(val *AdministratorSecurity) *NullableAdministratorSecurity {
	return &NullableAdministratorSecurity{value: val, isSet: true}
}

func (v NullableAdministratorSecurity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdministratorSecurity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


