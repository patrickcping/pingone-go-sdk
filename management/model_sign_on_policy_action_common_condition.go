/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-07-18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// SignOnPolicyActionCommonCondition - struct for SignOnPolicyActionCommonCondition
type SignOnPolicyActionCommonCondition struct {
	SignOnPolicyActionCommonConditionAnd *SignOnPolicyActionCommonConditionAnd
	SignOnPolicyActionCommonConditionAnonymousNetwork *SignOnPolicyActionCommonConditionAnonymousNetwork
	SignOnPolicyActionCommonConditionEquals *SignOnPolicyActionCommonConditionEquals
	SignOnPolicyActionCommonConditionGeovelocity *SignOnPolicyActionCommonConditionGeovelocity
	SignOnPolicyActionCommonConditionGreater *SignOnPolicyActionCommonConditionGreater
	SignOnPolicyActionCommonConditionIPRange *SignOnPolicyActionCommonConditionIPRange
	SignOnPolicyActionCommonConditionIPRisk *SignOnPolicyActionCommonConditionIPRisk
	SignOnPolicyActionCommonConditionNot *SignOnPolicyActionCommonConditionNot
	SignOnPolicyActionCommonConditionOr *SignOnPolicyActionCommonConditionOr
}

// SignOnPolicyActionCommonConditionAndAsSignOnPolicyActionCommonCondition is a convenience function that returns SignOnPolicyActionCommonConditionAnd wrapped in SignOnPolicyActionCommonCondition
func SignOnPolicyActionCommonConditionAndAsSignOnPolicyActionCommonCondition(v *SignOnPolicyActionCommonConditionAnd) SignOnPolicyActionCommonCondition {
	return SignOnPolicyActionCommonCondition{
		SignOnPolicyActionCommonConditionAnd: v,
	}
}

// SignOnPolicyActionCommonConditionAnonymousNetworkAsSignOnPolicyActionCommonCondition is a convenience function that returns SignOnPolicyActionCommonConditionAnonymousNetwork wrapped in SignOnPolicyActionCommonCondition
func SignOnPolicyActionCommonConditionAnonymousNetworkAsSignOnPolicyActionCommonCondition(v *SignOnPolicyActionCommonConditionAnonymousNetwork) SignOnPolicyActionCommonCondition {
	return SignOnPolicyActionCommonCondition{
		SignOnPolicyActionCommonConditionAnonymousNetwork: v,
	}
}

// SignOnPolicyActionCommonConditionEqualsAsSignOnPolicyActionCommonCondition is a convenience function that returns SignOnPolicyActionCommonConditionEquals wrapped in SignOnPolicyActionCommonCondition
func SignOnPolicyActionCommonConditionEqualsAsSignOnPolicyActionCommonCondition(v *SignOnPolicyActionCommonConditionEquals) SignOnPolicyActionCommonCondition {
	return SignOnPolicyActionCommonCondition{
		SignOnPolicyActionCommonConditionEquals: v,
	}
}

// SignOnPolicyActionCommonConditionGeovelocityAsSignOnPolicyActionCommonCondition is a convenience function that returns SignOnPolicyActionCommonConditionGeovelocity wrapped in SignOnPolicyActionCommonCondition
func SignOnPolicyActionCommonConditionGeovelocityAsSignOnPolicyActionCommonCondition(v *SignOnPolicyActionCommonConditionGeovelocity) SignOnPolicyActionCommonCondition {
	return SignOnPolicyActionCommonCondition{
		SignOnPolicyActionCommonConditionGeovelocity: v,
	}
}

// SignOnPolicyActionCommonConditionGreaterAsSignOnPolicyActionCommonCondition is a convenience function that returns SignOnPolicyActionCommonConditionGreater wrapped in SignOnPolicyActionCommonCondition
func SignOnPolicyActionCommonConditionGreaterAsSignOnPolicyActionCommonCondition(v *SignOnPolicyActionCommonConditionGreater) SignOnPolicyActionCommonCondition {
	return SignOnPolicyActionCommonCondition{
		SignOnPolicyActionCommonConditionGreater: v,
	}
}

// SignOnPolicyActionCommonConditionIPRangeAsSignOnPolicyActionCommonCondition is a convenience function that returns SignOnPolicyActionCommonConditionIPRange wrapped in SignOnPolicyActionCommonCondition
func SignOnPolicyActionCommonConditionIPRangeAsSignOnPolicyActionCommonCondition(v *SignOnPolicyActionCommonConditionIPRange) SignOnPolicyActionCommonCondition {
	return SignOnPolicyActionCommonCondition{
		SignOnPolicyActionCommonConditionIPRange: v,
	}
}

// SignOnPolicyActionCommonConditionIPRiskAsSignOnPolicyActionCommonCondition is a convenience function that returns SignOnPolicyActionCommonConditionIPRisk wrapped in SignOnPolicyActionCommonCondition
func SignOnPolicyActionCommonConditionIPRiskAsSignOnPolicyActionCommonCondition(v *SignOnPolicyActionCommonConditionIPRisk) SignOnPolicyActionCommonCondition {
	return SignOnPolicyActionCommonCondition{
		SignOnPolicyActionCommonConditionIPRisk: v,
	}
}

// SignOnPolicyActionCommonConditionNotAsSignOnPolicyActionCommonCondition is a convenience function that returns SignOnPolicyActionCommonConditionNot wrapped in SignOnPolicyActionCommonCondition
func SignOnPolicyActionCommonConditionNotAsSignOnPolicyActionCommonCondition(v *SignOnPolicyActionCommonConditionNot) SignOnPolicyActionCommonCondition {
	return SignOnPolicyActionCommonCondition{
		SignOnPolicyActionCommonConditionNot: v,
	}
}

// SignOnPolicyActionCommonConditionOrAsSignOnPolicyActionCommonCondition is a convenience function that returns SignOnPolicyActionCommonConditionOr wrapped in SignOnPolicyActionCommonCondition
func SignOnPolicyActionCommonConditionOrAsSignOnPolicyActionCommonCondition(v *SignOnPolicyActionCommonConditionOr) SignOnPolicyActionCommonCondition {
	return SignOnPolicyActionCommonCondition{
		SignOnPolicyActionCommonConditionOr: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SignOnPolicyActionCommonCondition) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SignOnPolicyActionCommonConditionAnd
	err = newStrictDecoder(data).Decode(&dst.SignOnPolicyActionCommonConditionAnd)
	if err == nil {
		jsonSignOnPolicyActionCommonConditionAnd, _ := json.Marshal(dst.SignOnPolicyActionCommonConditionAnd)
		if string(jsonSignOnPolicyActionCommonConditionAnd) == "{}" { // empty struct
			dst.SignOnPolicyActionCommonConditionAnd = nil
		} else {
			match++
		}
	} else {
		dst.SignOnPolicyActionCommonConditionAnd = nil
	}

	// try to unmarshal data into SignOnPolicyActionCommonConditionAnonymousNetwork
	err = newStrictDecoder(data).Decode(&dst.SignOnPolicyActionCommonConditionAnonymousNetwork)
	if err == nil {
		jsonSignOnPolicyActionCommonConditionAnonymousNetwork, _ := json.Marshal(dst.SignOnPolicyActionCommonConditionAnonymousNetwork)
		if string(jsonSignOnPolicyActionCommonConditionAnonymousNetwork) == "{}" { // empty struct
			dst.SignOnPolicyActionCommonConditionAnonymousNetwork = nil
		} else {
			match++
		}
	} else {
		dst.SignOnPolicyActionCommonConditionAnonymousNetwork = nil
	}

	// try to unmarshal data into SignOnPolicyActionCommonConditionEquals
	err = newStrictDecoder(data).Decode(&dst.SignOnPolicyActionCommonConditionEquals)
	if err == nil {
		jsonSignOnPolicyActionCommonConditionEquals, _ := json.Marshal(dst.SignOnPolicyActionCommonConditionEquals)
		if string(jsonSignOnPolicyActionCommonConditionEquals) == "{}" { // empty struct
			dst.SignOnPolicyActionCommonConditionEquals = nil
		} else {
			match++
		}
	} else {
		dst.SignOnPolicyActionCommonConditionEquals = nil
	}

	// try to unmarshal data into SignOnPolicyActionCommonConditionGeovelocity
	err = newStrictDecoder(data).Decode(&dst.SignOnPolicyActionCommonConditionGeovelocity)
	if err == nil {
		jsonSignOnPolicyActionCommonConditionGeovelocity, _ := json.Marshal(dst.SignOnPolicyActionCommonConditionGeovelocity)
		if string(jsonSignOnPolicyActionCommonConditionGeovelocity) == "{}" { // empty struct
			dst.SignOnPolicyActionCommonConditionGeovelocity = nil
		} else {
			match++
		}
	} else {
		dst.SignOnPolicyActionCommonConditionGeovelocity = nil
	}

	// try to unmarshal data into SignOnPolicyActionCommonConditionGreater
	err = newStrictDecoder(data).Decode(&dst.SignOnPolicyActionCommonConditionGreater)
	if err == nil {
		jsonSignOnPolicyActionCommonConditionGreater, _ := json.Marshal(dst.SignOnPolicyActionCommonConditionGreater)
		if string(jsonSignOnPolicyActionCommonConditionGreater) == "{}" { // empty struct
			dst.SignOnPolicyActionCommonConditionGreater = nil
		} else {
			match++
		}
	} else {
		dst.SignOnPolicyActionCommonConditionGreater = nil
	}

	// try to unmarshal data into SignOnPolicyActionCommonConditionIPRange
	err = newStrictDecoder(data).Decode(&dst.SignOnPolicyActionCommonConditionIPRange)
	if err == nil {
		jsonSignOnPolicyActionCommonConditionIPRange, _ := json.Marshal(dst.SignOnPolicyActionCommonConditionIPRange)
		if string(jsonSignOnPolicyActionCommonConditionIPRange) == "{}" { // empty struct
			dst.SignOnPolicyActionCommonConditionIPRange = nil
		} else {
			match++
		}
	} else {
		dst.SignOnPolicyActionCommonConditionIPRange = nil
	}

	// try to unmarshal data into SignOnPolicyActionCommonConditionIPRisk
	err = newStrictDecoder(data).Decode(&dst.SignOnPolicyActionCommonConditionIPRisk)
	if err == nil {
		jsonSignOnPolicyActionCommonConditionIPRisk, _ := json.Marshal(dst.SignOnPolicyActionCommonConditionIPRisk)
		if string(jsonSignOnPolicyActionCommonConditionIPRisk) == "{}" { // empty struct
			dst.SignOnPolicyActionCommonConditionIPRisk = nil
		} else {
			match++
		}
	} else {
		dst.SignOnPolicyActionCommonConditionIPRisk = nil
	}

	// try to unmarshal data into SignOnPolicyActionCommonConditionNot
	err = newStrictDecoder(data).Decode(&dst.SignOnPolicyActionCommonConditionNot)
	if err == nil {
		jsonSignOnPolicyActionCommonConditionNot, _ := json.Marshal(dst.SignOnPolicyActionCommonConditionNot)
		if string(jsonSignOnPolicyActionCommonConditionNot) == "{}" { // empty struct
			dst.SignOnPolicyActionCommonConditionNot = nil
		} else {
			match++
		}
	} else {
		dst.SignOnPolicyActionCommonConditionNot = nil
	}

	// try to unmarshal data into SignOnPolicyActionCommonConditionOr
	err = newStrictDecoder(data).Decode(&dst.SignOnPolicyActionCommonConditionOr)
	if err == nil {
		jsonSignOnPolicyActionCommonConditionOr, _ := json.Marshal(dst.SignOnPolicyActionCommonConditionOr)
		if string(jsonSignOnPolicyActionCommonConditionOr) == "{}" { // empty struct
			dst.SignOnPolicyActionCommonConditionOr = nil
		} else {
			match++
		}
	} else {
		dst.SignOnPolicyActionCommonConditionOr = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SignOnPolicyActionCommonConditionAnd = nil
		dst.SignOnPolicyActionCommonConditionAnonymousNetwork = nil
		dst.SignOnPolicyActionCommonConditionEquals = nil
		dst.SignOnPolicyActionCommonConditionGeovelocity = nil
		dst.SignOnPolicyActionCommonConditionGreater = nil
		dst.SignOnPolicyActionCommonConditionIPRange = nil
		dst.SignOnPolicyActionCommonConditionIPRisk = nil
		dst.SignOnPolicyActionCommonConditionNot = nil
		dst.SignOnPolicyActionCommonConditionOr = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(SignOnPolicyActionCommonCondition)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(SignOnPolicyActionCommonCondition)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SignOnPolicyActionCommonCondition) MarshalJSON() ([]byte, error) {
	if src.SignOnPolicyActionCommonConditionAnd != nil {
		return json.Marshal(&src.SignOnPolicyActionCommonConditionAnd)
	}

	if src.SignOnPolicyActionCommonConditionAnonymousNetwork != nil {
		return json.Marshal(&src.SignOnPolicyActionCommonConditionAnonymousNetwork)
	}

	if src.SignOnPolicyActionCommonConditionEquals != nil {
		return json.Marshal(&src.SignOnPolicyActionCommonConditionEquals)
	}

	if src.SignOnPolicyActionCommonConditionGeovelocity != nil {
		return json.Marshal(&src.SignOnPolicyActionCommonConditionGeovelocity)
	}

	if src.SignOnPolicyActionCommonConditionGreater != nil {
		return json.Marshal(&src.SignOnPolicyActionCommonConditionGreater)
	}

	if src.SignOnPolicyActionCommonConditionIPRange != nil {
		return json.Marshal(&src.SignOnPolicyActionCommonConditionIPRange)
	}

	if src.SignOnPolicyActionCommonConditionIPRisk != nil {
		return json.Marshal(&src.SignOnPolicyActionCommonConditionIPRisk)
	}

	if src.SignOnPolicyActionCommonConditionNot != nil {
		return json.Marshal(&src.SignOnPolicyActionCommonConditionNot)
	}

	if src.SignOnPolicyActionCommonConditionOr != nil {
		return json.Marshal(&src.SignOnPolicyActionCommonConditionOr)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SignOnPolicyActionCommonCondition) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SignOnPolicyActionCommonConditionAnd != nil {
		return obj.SignOnPolicyActionCommonConditionAnd
	}

	if obj.SignOnPolicyActionCommonConditionAnonymousNetwork != nil {
		return obj.SignOnPolicyActionCommonConditionAnonymousNetwork
	}

	if obj.SignOnPolicyActionCommonConditionEquals != nil {
		return obj.SignOnPolicyActionCommonConditionEquals
	}

	if obj.SignOnPolicyActionCommonConditionGeovelocity != nil {
		return obj.SignOnPolicyActionCommonConditionGeovelocity
	}

	if obj.SignOnPolicyActionCommonConditionGreater != nil {
		return obj.SignOnPolicyActionCommonConditionGreater
	}

	if obj.SignOnPolicyActionCommonConditionIPRange != nil {
		return obj.SignOnPolicyActionCommonConditionIPRange
	}

	if obj.SignOnPolicyActionCommonConditionIPRisk != nil {
		return obj.SignOnPolicyActionCommonConditionIPRisk
	}

	if obj.SignOnPolicyActionCommonConditionNot != nil {
		return obj.SignOnPolicyActionCommonConditionNot
	}

	if obj.SignOnPolicyActionCommonConditionOr != nil {
		return obj.SignOnPolicyActionCommonConditionOr
	}

	// all schemas are nil
	return nil
}

type NullableSignOnPolicyActionCommonCondition struct {
	value *SignOnPolicyActionCommonCondition
	isSet bool
}

func (v NullableSignOnPolicyActionCommonCondition) Get() *SignOnPolicyActionCommonCondition {
	return v.value
}

func (v *NullableSignOnPolicyActionCommonCondition) Set(val *SignOnPolicyActionCommonCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableSignOnPolicyActionCommonCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableSignOnPolicyActionCommonCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignOnPolicyActionCommonCondition(val *SignOnPolicyActionCommonCondition) *NullableSignOnPolicyActionCommonCondition {
	return &NullableSignOnPolicyActionCommonCondition{value: val, isSet: true}
}

func (v NullableSignOnPolicyActionCommonCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignOnPolicyActionCommonCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


