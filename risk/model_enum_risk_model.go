/*
PingOne Platform API - PingOne Risk

The PingOne Platform API covering the PingOne Risk service

API version: 2021-10-17
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package risk

import (
	"encoding/json"
	"fmt"
)

// EnumRiskModel Enum string that specifies the risk model.  Options are `points` (individual user model) and `login_anomaly_statistic` (organization wide model).
type EnumRiskModel string

// List of EnumRiskModel
const (
	ENUMRISKMODEL_POINTS EnumRiskModel = "points"
	ENUMRISKMODEL_LOGIN_ANOMALY_STATISTIC EnumRiskModel = "login_anomaly_statistic"
)

// All allowed values of EnumRiskModel enum
var AllowedEnumRiskModelEnumValues = []EnumRiskModel{
	"points",
	"login_anomaly_statistic",
}

func (v *EnumRiskModel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumRiskModel(value)
	for _, existing := range AllowedEnumRiskModelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumRiskModel", value)
}

// NewEnumRiskModelFromValue returns a pointer to a valid EnumRiskModel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumRiskModelFromValue(v string) (*EnumRiskModel, error) {
	ev := EnumRiskModel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumRiskModel: valid values are %v", v, AllowedEnumRiskModelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumRiskModel) IsValid() bool {
	for _, existing := range AllowedEnumRiskModelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumRiskModel value
func (v EnumRiskModel) Ptr() *EnumRiskModel {
	return &v
}

type NullableEnumRiskModel struct {
	value *EnumRiskModel
	isSet bool
}

func (v NullableEnumRiskModel) Get() *EnumRiskModel {
	return v.value
}

func (v *NullableEnumRiskModel) Set(val *EnumRiskModel) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumRiskModel) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumRiskModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumRiskModel(val *EnumRiskModel) *NullableEnumRiskModel {
	return &NullableEnumRiskModel{value: val, isSet: true}
}

func (v NullableEnumRiskModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumRiskModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

