/*
PingOne Platform API - PingOne Risk

The PingOne Platform API covering the PingOne Risk service

API version: 2021-10-17
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package risk

import (
	"encoding/json"
	"fmt"
)

// RiskPredictor - struct for RiskPredictor
type RiskPredictor struct {
	RiskPredictorAnonymousNetwork *RiskPredictorAnonymousNetwork
	RiskPredictorComposite *RiskPredictorComposite
	RiskPredictorCustom *RiskPredictorCustom
	RiskPredictorGeovelocity *RiskPredictorGeovelocity
	RiskPredictorIPReputation *RiskPredictorIPReputation
	RiskPredictorNewDevice *RiskPredictorNewDevice
	RiskPredictorUEBA *RiskPredictorUEBA
	RiskPredictorUserLocationAnomaly *RiskPredictorUserLocationAnomaly
	RiskPredictorVelocity *RiskPredictorVelocity
}

// RiskPredictorAnonymousNetworkAsRiskPredictor is a convenience function that returns RiskPredictorAnonymousNetwork wrapped in RiskPredictor
func RiskPredictorAnonymousNetworkAsRiskPredictor(v *RiskPredictorAnonymousNetwork) RiskPredictor {
	return RiskPredictor{
		RiskPredictorAnonymousNetwork: v,
	}
}

// RiskPredictorCompositeAsRiskPredictor is a convenience function that returns RiskPredictorComposite wrapped in RiskPredictor
func RiskPredictorCompositeAsRiskPredictor(v *RiskPredictorComposite) RiskPredictor {
	return RiskPredictor{
		RiskPredictorComposite: v,
	}
}

// RiskPredictorCustomAsRiskPredictor is a convenience function that returns RiskPredictorCustom wrapped in RiskPredictor
func RiskPredictorCustomAsRiskPredictor(v *RiskPredictorCustom) RiskPredictor {
	return RiskPredictor{
		RiskPredictorCustom: v,
	}
}

// RiskPredictorGeovelocityAsRiskPredictor is a convenience function that returns RiskPredictorGeovelocity wrapped in RiskPredictor
func RiskPredictorGeovelocityAsRiskPredictor(v *RiskPredictorGeovelocity) RiskPredictor {
	return RiskPredictor{
		RiskPredictorGeovelocity: v,
	}
}

// RiskPredictorIPReputationAsRiskPredictor is a convenience function that returns RiskPredictorIPReputation wrapped in RiskPredictor
func RiskPredictorIPReputationAsRiskPredictor(v *RiskPredictorIPReputation) RiskPredictor {
	return RiskPredictor{
		RiskPredictorIPReputation: v,
	}
}

// RiskPredictorNewDeviceAsRiskPredictor is a convenience function that returns RiskPredictorNewDevice wrapped in RiskPredictor
func RiskPredictorNewDeviceAsRiskPredictor(v *RiskPredictorNewDevice) RiskPredictor {
	return RiskPredictor{
		RiskPredictorNewDevice: v,
	}
}

// RiskPredictorUEBAAsRiskPredictor is a convenience function that returns RiskPredictorUEBA wrapped in RiskPredictor
func RiskPredictorUEBAAsRiskPredictor(v *RiskPredictorUEBA) RiskPredictor {
	return RiskPredictor{
		RiskPredictorUEBA: v,
	}
}

// RiskPredictorUserLocationAnomalyAsRiskPredictor is a convenience function that returns RiskPredictorUserLocationAnomaly wrapped in RiskPredictor
func RiskPredictorUserLocationAnomalyAsRiskPredictor(v *RiskPredictorUserLocationAnomaly) RiskPredictor {
	return RiskPredictor{
		RiskPredictorUserLocationAnomaly: v,
	}
}

// RiskPredictorVelocityAsRiskPredictor is a convenience function that returns RiskPredictorVelocity wrapped in RiskPredictor
func RiskPredictorVelocityAsRiskPredictor(v *RiskPredictorVelocity) RiskPredictor {
	return RiskPredictor{
		RiskPredictorVelocity: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RiskPredictor) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RiskPredictorAnonymousNetwork
	err = newStrictDecoder(data).Decode(&dst.RiskPredictorAnonymousNetwork)
	if err == nil {
		jsonRiskPredictorAnonymousNetwork, _ := json.Marshal(dst.RiskPredictorAnonymousNetwork)
		if string(jsonRiskPredictorAnonymousNetwork) == "{}" { // empty struct
			dst.RiskPredictorAnonymousNetwork = nil
		} else {
			match++
		}
	} else {
		dst.RiskPredictorAnonymousNetwork = nil
	}

	// try to unmarshal data into RiskPredictorComposite
	err = newStrictDecoder(data).Decode(&dst.RiskPredictorComposite)
	if err == nil {
		jsonRiskPredictorComposite, _ := json.Marshal(dst.RiskPredictorComposite)
		if string(jsonRiskPredictorComposite) == "{}" { // empty struct
			dst.RiskPredictorComposite = nil
		} else {
			match++
		}
	} else {
		dst.RiskPredictorComposite = nil
	}

	// try to unmarshal data into RiskPredictorCustom
	err = newStrictDecoder(data).Decode(&dst.RiskPredictorCustom)
	if err == nil {
		jsonRiskPredictorCustom, _ := json.Marshal(dst.RiskPredictorCustom)
		if string(jsonRiskPredictorCustom) == "{}" { // empty struct
			dst.RiskPredictorCustom = nil
		} else {
			match++
		}
	} else {
		dst.RiskPredictorCustom = nil
	}

	// try to unmarshal data into RiskPredictorGeovelocity
	err = newStrictDecoder(data).Decode(&dst.RiskPredictorGeovelocity)
	if err == nil {
		jsonRiskPredictorGeovelocity, _ := json.Marshal(dst.RiskPredictorGeovelocity)
		if string(jsonRiskPredictorGeovelocity) == "{}" { // empty struct
			dst.RiskPredictorGeovelocity = nil
		} else {
			match++
		}
	} else {
		dst.RiskPredictorGeovelocity = nil
	}

	// try to unmarshal data into RiskPredictorIPReputation
	err = newStrictDecoder(data).Decode(&dst.RiskPredictorIPReputation)
	if err == nil {
		jsonRiskPredictorIPReputation, _ := json.Marshal(dst.RiskPredictorIPReputation)
		if string(jsonRiskPredictorIPReputation) == "{}" { // empty struct
			dst.RiskPredictorIPReputation = nil
		} else {
			match++
		}
	} else {
		dst.RiskPredictorIPReputation = nil
	}

	// try to unmarshal data into RiskPredictorNewDevice
	err = newStrictDecoder(data).Decode(&dst.RiskPredictorNewDevice)
	if err == nil {
		jsonRiskPredictorNewDevice, _ := json.Marshal(dst.RiskPredictorNewDevice)
		if string(jsonRiskPredictorNewDevice) == "{}" { // empty struct
			dst.RiskPredictorNewDevice = nil
		} else {
			match++
		}
	} else {
		dst.RiskPredictorNewDevice = nil
	}

	// try to unmarshal data into RiskPredictorUEBA
	err = newStrictDecoder(data).Decode(&dst.RiskPredictorUEBA)
	if err == nil {
		jsonRiskPredictorUEBA, _ := json.Marshal(dst.RiskPredictorUEBA)
		if string(jsonRiskPredictorUEBA) == "{}" { // empty struct
			dst.RiskPredictorUEBA = nil
		} else {
			match++
		}
	} else {
		dst.RiskPredictorUEBA = nil
	}

	// try to unmarshal data into RiskPredictorUserLocationAnomaly
	err = newStrictDecoder(data).Decode(&dst.RiskPredictorUserLocationAnomaly)
	if err == nil {
		jsonRiskPredictorUserLocationAnomaly, _ := json.Marshal(dst.RiskPredictorUserLocationAnomaly)
		if string(jsonRiskPredictorUserLocationAnomaly) == "{}" { // empty struct
			dst.RiskPredictorUserLocationAnomaly = nil
		} else {
			match++
		}
	} else {
		dst.RiskPredictorUserLocationAnomaly = nil
	}

	// try to unmarshal data into RiskPredictorVelocity
	err = newStrictDecoder(data).Decode(&dst.RiskPredictorVelocity)
	if err == nil {
		jsonRiskPredictorVelocity, _ := json.Marshal(dst.RiskPredictorVelocity)
		if string(jsonRiskPredictorVelocity) == "{}" { // empty struct
			dst.RiskPredictorVelocity = nil
		} else {
			match++
		}
	} else {
		dst.RiskPredictorVelocity = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RiskPredictorAnonymousNetwork = nil
		dst.RiskPredictorComposite = nil
		dst.RiskPredictorCustom = nil
		dst.RiskPredictorGeovelocity = nil
		dst.RiskPredictorIPReputation = nil
		dst.RiskPredictorNewDevice = nil
		dst.RiskPredictorUEBA = nil
		dst.RiskPredictorUserLocationAnomaly = nil
		dst.RiskPredictorVelocity = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RiskPredictor)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RiskPredictor)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RiskPredictor) MarshalJSON() ([]byte, error) {
	if src.RiskPredictorAnonymousNetwork != nil {
		return json.Marshal(&src.RiskPredictorAnonymousNetwork)
	}

	if src.RiskPredictorComposite != nil {
		return json.Marshal(&src.RiskPredictorComposite)
	}

	if src.RiskPredictorCustom != nil {
		return json.Marshal(&src.RiskPredictorCustom)
	}

	if src.RiskPredictorGeovelocity != nil {
		return json.Marshal(&src.RiskPredictorGeovelocity)
	}

	if src.RiskPredictorIPReputation != nil {
		return json.Marshal(&src.RiskPredictorIPReputation)
	}

	if src.RiskPredictorNewDevice != nil {
		return json.Marshal(&src.RiskPredictorNewDevice)
	}

	if src.RiskPredictorUEBA != nil {
		return json.Marshal(&src.RiskPredictorUEBA)
	}

	if src.RiskPredictorUserLocationAnomaly != nil {
		return json.Marshal(&src.RiskPredictorUserLocationAnomaly)
	}

	if src.RiskPredictorVelocity != nil {
		return json.Marshal(&src.RiskPredictorVelocity)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RiskPredictor) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RiskPredictorAnonymousNetwork != nil {
		return obj.RiskPredictorAnonymousNetwork
	}

	if obj.RiskPredictorComposite != nil {
		return obj.RiskPredictorComposite
	}

	if obj.RiskPredictorCustom != nil {
		return obj.RiskPredictorCustom
	}

	if obj.RiskPredictorGeovelocity != nil {
		return obj.RiskPredictorGeovelocity
	}

	if obj.RiskPredictorIPReputation != nil {
		return obj.RiskPredictorIPReputation
	}

	if obj.RiskPredictorNewDevice != nil {
		return obj.RiskPredictorNewDevice
	}

	if obj.RiskPredictorUEBA != nil {
		return obj.RiskPredictorUEBA
	}

	if obj.RiskPredictorUserLocationAnomaly != nil {
		return obj.RiskPredictorUserLocationAnomaly
	}

	if obj.RiskPredictorVelocity != nil {
		return obj.RiskPredictorVelocity
	}

	// all schemas are nil
	return nil
}

type NullableRiskPredictor struct {
	value *RiskPredictor
	isSet bool
}

func (v NullableRiskPredictor) Get() *RiskPredictor {
	return v.value
}

func (v *NullableRiskPredictor) Set(val *RiskPredictor) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskPredictor) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskPredictor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskPredictor(val *RiskPredictor) *NullableRiskPredictor {
	return &NullableRiskPredictor{value: val, isSet: true}
}

func (v NullableRiskPredictor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskPredictor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


