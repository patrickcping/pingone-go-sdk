/*
PingOne Platform API - PingOne Verify

The PingOne Platform API covering the PingOne Verify service

API version: 2023-05-26
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package verify

import (
	"encoding/json"
)

// checks if the TransactionConfigurationTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionConfigurationTransaction{}

// TransactionConfigurationTransaction struct for TransactionConfigurationTransaction
type TransactionConfigurationTransaction struct {
	Timeout *TransactionConfigurationTransactionTimeout `json:"timeout,omitempty"`
	DataCollection *TransactionConfigurationTransactionDataCollection `json:"dataCollection,omitempty"`
	DataCollectionOnly *bool `json:"dataCollectionOnly,omitempty"`
}

// NewTransactionConfigurationTransaction instantiates a new TransactionConfigurationTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionConfigurationTransaction() *TransactionConfigurationTransaction {
	this := TransactionConfigurationTransaction{}
	return &this
}

// NewTransactionConfigurationTransactionWithDefaults instantiates a new TransactionConfigurationTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionConfigurationTransactionWithDefaults() *TransactionConfigurationTransaction {
	this := TransactionConfigurationTransaction{}
	return &this
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *TransactionConfigurationTransaction) GetTimeout() TransactionConfigurationTransactionTimeout {
	if o == nil || IsNil(o.Timeout) {
		var ret TransactionConfigurationTransactionTimeout
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionConfigurationTransaction) GetTimeoutOk() (*TransactionConfigurationTransactionTimeout, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *TransactionConfigurationTransaction) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given TransactionConfigurationTransactionTimeout and assigns it to the Timeout field.
func (o *TransactionConfigurationTransaction) SetTimeout(v TransactionConfigurationTransactionTimeout) {
	o.Timeout = &v
}

// GetDataCollection returns the DataCollection field value if set, zero value otherwise.
func (o *TransactionConfigurationTransaction) GetDataCollection() TransactionConfigurationTransactionDataCollection {
	if o == nil || IsNil(o.DataCollection) {
		var ret TransactionConfigurationTransactionDataCollection
		return ret
	}
	return *o.DataCollection
}

// GetDataCollectionOk returns a tuple with the DataCollection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionConfigurationTransaction) GetDataCollectionOk() (*TransactionConfigurationTransactionDataCollection, bool) {
	if o == nil || IsNil(o.DataCollection) {
		return nil, false
	}
	return o.DataCollection, true
}

// HasDataCollection returns a boolean if a field has been set.
func (o *TransactionConfigurationTransaction) HasDataCollection() bool {
	if o != nil && !IsNil(o.DataCollection) {
		return true
	}

	return false
}

// SetDataCollection gets a reference to the given TransactionConfigurationTransactionDataCollection and assigns it to the DataCollection field.
func (o *TransactionConfigurationTransaction) SetDataCollection(v TransactionConfigurationTransactionDataCollection) {
	o.DataCollection = &v
}

// GetDataCollectionOnly returns the DataCollectionOnly field value if set, zero value otherwise.
func (o *TransactionConfigurationTransaction) GetDataCollectionOnly() bool {
	if o == nil || IsNil(o.DataCollectionOnly) {
		var ret bool
		return ret
	}
	return *o.DataCollectionOnly
}

// GetDataCollectionOnlyOk returns a tuple with the DataCollectionOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionConfigurationTransaction) GetDataCollectionOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.DataCollectionOnly) {
		return nil, false
	}
	return o.DataCollectionOnly, true
}

// HasDataCollectionOnly returns a boolean if a field has been set.
func (o *TransactionConfigurationTransaction) HasDataCollectionOnly() bool {
	if o != nil && !IsNil(o.DataCollectionOnly) {
		return true
	}

	return false
}

// SetDataCollectionOnly gets a reference to the given bool and assigns it to the DataCollectionOnly field.
func (o *TransactionConfigurationTransaction) SetDataCollectionOnly(v bool) {
	o.DataCollectionOnly = &v
}

func (o TransactionConfigurationTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionConfigurationTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.DataCollection) {
		toSerialize["dataCollection"] = o.DataCollection
	}
	if !IsNil(o.DataCollectionOnly) {
		toSerialize["dataCollectionOnly"] = o.DataCollectionOnly
	}
	return toSerialize, nil
}

type NullableTransactionConfigurationTransaction struct {
	value *TransactionConfigurationTransaction
	isSet bool
}

func (v NullableTransactionConfigurationTransaction) Get() *TransactionConfigurationTransaction {
	return v.value
}

func (v *NullableTransactionConfigurationTransaction) Set(val *TransactionConfigurationTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionConfigurationTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionConfigurationTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionConfigurationTransaction(val *TransactionConfigurationTransaction) *NullableTransactionConfigurationTransaction {
	return &NullableTransactionConfigurationTransaction{value: val, isSet: true}
}

func (v NullableTransactionConfigurationTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionConfigurationTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


