/*
PingOne Platform API - PingOne Verify

The PingOne Platform API covering the PingOne Verify service

API version: 2023-05-26
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package verify

import (
	"encoding/json"
	"fmt"
)

// EnumLongTimeUnit A string that defines the time unit of a specified duration. Options are `SECONDS`, `MINUTES` and `HOURS`.
type EnumLongTimeUnit string

// List of EnumLongTimeUnit
const (
	ENUMLONGTIMEUNIT_SECONDS EnumLongTimeUnit = "SECONDS"
	ENUMLONGTIMEUNIT_MINUTES EnumLongTimeUnit = "MINUTES"
	ENUMLONGTIMEUNIT_HOURS EnumLongTimeUnit = "HOURS"
)

// All allowed values of EnumLongTimeUnit enum
var AllowedEnumLongTimeUnitEnumValues = []EnumLongTimeUnit{
	"SECONDS",
	"MINUTES",
	"HOURS",
}

func (v *EnumLongTimeUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumLongTimeUnit(value)
	for _, existing := range AllowedEnumLongTimeUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumLongTimeUnit", value)
}

// NewEnumLongTimeUnitFromValue returns a pointer to a valid EnumLongTimeUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumLongTimeUnitFromValue(v string) (*EnumLongTimeUnit, error) {
	ev := EnumLongTimeUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumLongTimeUnit: valid values are %v", v, AllowedEnumLongTimeUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumLongTimeUnit) IsValid() bool {
	for _, existing := range AllowedEnumLongTimeUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumLongTimeUnit value
func (v EnumLongTimeUnit) Ptr() *EnumLongTimeUnit {
	return &v
}

type NullableEnumLongTimeUnit struct {
	value *EnumLongTimeUnit
	isSet bool
}

func (v NullableEnumLongTimeUnit) Get() *EnumLongTimeUnit {
	return v.value
}

func (v *NullableEnumLongTimeUnit) Set(val *EnumLongTimeUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumLongTimeUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumLongTimeUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumLongTimeUnit(val *EnumLongTimeUnit) *NullableEnumLongTimeUnit {
	return &NullableEnumLongTimeUnit{value: val, isSet: true}
}

func (v NullableEnumLongTimeUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumLongTimeUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

