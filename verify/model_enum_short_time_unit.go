/*
PingOne Platform API - PingOne Verify

The PingOne Platform API covering the PingOne Verify service

API version: 2023-05-26
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package verify

import (
	"encoding/json"
	"fmt"
)

// EnumShortTimeUnit A string that defines the time unit of a specified duration in `SECONDS` or `MINUTES`.
type EnumShortTimeUnit string

// List of EnumShortTimeUnit
const (
	ENUMSHORTTIMEUNIT_SECONDS EnumShortTimeUnit = "SECONDS"
	ENUMSHORTTIMEUNIT_MINUTES EnumShortTimeUnit = "MINUTES"
)

// All allowed values of EnumShortTimeUnit enum
var AllowedEnumShortTimeUnitEnumValues = []EnumShortTimeUnit{
	"SECONDS",
	"MINUTES",
}

func (v *EnumShortTimeUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumShortTimeUnit(value)
	for _, existing := range AllowedEnumShortTimeUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumShortTimeUnit", value)
}

// NewEnumShortTimeUnitFromValue returns a pointer to a valid EnumShortTimeUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumShortTimeUnitFromValue(v string) (*EnumShortTimeUnit, error) {
	ev := EnumShortTimeUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumShortTimeUnit: valid values are %v", v, AllowedEnumShortTimeUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumShortTimeUnit) IsValid() bool {
	for _, existing := range AllowedEnumShortTimeUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumShortTimeUnit value
func (v EnumShortTimeUnit) Ptr() *EnumShortTimeUnit {
	return &v
}

type NullableEnumShortTimeUnit struct {
	value *EnumShortTimeUnit
	isSet bool
}

func (v NullableEnumShortTimeUnit) Get() *EnumShortTimeUnit {
	return v.value
}

func (v *NullableEnumShortTimeUnit) Set(val *EnumShortTimeUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumShortTimeUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumShortTimeUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumShortTimeUnit(val *EnumShortTimeUnit) *NullableEnumShortTimeUnit {
	return &NullableEnumShortTimeUnit{value: val, isSet: true}
}

func (v NullableEnumShortTimeUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumShortTimeUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

